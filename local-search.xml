<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>c++编译报错消息详解（遇到一个更一个）</title>
    <link href="/2021/04/19/c++%E7%BC%96%E8%AF%91%E6%8A%A5%E9%94%99%E6%B6%88%E6%81%AF%E8%AF%A6%E8%A7%A3%EF%BC%88%E9%81%87%E5%88%B0%E4%B8%80%E4%B8%AA%E6%9B%B4%E4%B8%80%E4%B8%AA%EF%BC%89/"/>
    <url>/2021/04/19/c++%E7%BC%96%E8%AF%91%E6%8A%A5%E9%94%99%E6%B6%88%E6%81%AF%E8%AF%A6%E8%A7%A3%EF%BC%88%E9%81%87%E5%88%B0%E4%B8%80%E4%B8%AA%E6%9B%B4%E4%B8%80%E4%B8%AA%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>title:c++报错消息详解（更新中）<br>categories: c++<br>index_img: <a href="https://www.google.com/imgres?imgurl=https%3A%2F%2Fpbs.twimg.com%2Fprofile_images%2F1465317643%2Flogo_128_400x400.png&amp;imgrefurl=https%3A%2F%2Ftwitter.com%2Fg_plusplus%2Fstatus%2F98167334514073600&amp;tbnid=cnFOsQVU2x_jiM&amp;vet=12ahUKEwjPudKBkojwAhUJ8ZQKHaitA78QMyggegUIARC-AQ..i&amp;docid=VqUhrcfy4N1RJM&amp;w=400&amp;h=400&amp;q=g%2B%2B&amp;safe=strict&amp;ved=2ahUKEwjPudKBkojwAhUJ8ZQKHaitA78QMyggegUIARC-AQ" target="_blank" rel="noopener">https://www.google.com/imgres?imgurl=https%3A%2F%2Fpbs.twimg.com%2Fprofile_images%2F1465317643%2Flogo_128_400x400.png&amp;imgrefurl=https%3A%2F%2Ftwitter.com%2Fg_plusplus%2Fstatus%2F98167334514073600&amp;tbnid=cnFOsQVU2x_jiM&amp;vet=12ahUKEwjPudKBkojwAhUJ8ZQKHaitA78QMyggegUIARC-AQ..i&amp;docid=VqUhrcfy4N1RJM&amp;w=400&amp;h=400&amp;q=g%2B%2B&amp;safe=strict&amp;ved=2ahUKEwjPudKBkojwAhUJ8ZQKHaitA78QMyggegUIARC-AQ</a><br>banner_img: <a href="https://www.google.com/imgres?imgurl=https%3A%2F%2Fpbs.twimg.com%2Fprofile_images%2F1465317643%2Flogo_128_400x400.png&amp;imgrefurl=https%3A%2F%2Ftwitter.com%2Fg_plusplus%2Fstatus%2F98167334514073600&amp;tbnid=cnFOsQVU2x_jiM&amp;vet=12ahUKEwjPudKBkojwAhUJ8ZQKHaitA78QMyggegUIARC-AQ..i&amp;docid=VqUhrcfy4N1RJM&amp;w=400&amp;h=400&amp;q=g%2B%2B&amp;safe=strict&amp;ved=2ahUKEwjPudKBkojwAhUJ8ZQKHaitA78QMyggegUIARC-AQ" target="_blank" rel="noopener">https://www.google.com/imgres?imgurl=https%3A%2F%2Fpbs.twimg.com%2Fprofile_images%2F1465317643%2Flogo_128_400x400.png&amp;imgrefurl=https%3A%2F%2Ftwitter.com%2Fg_plusplus%2Fstatus%2F98167334514073600&amp;tbnid=cnFOsQVU2x_jiM&amp;vet=12ahUKEwjPudKBkojwAhUJ8ZQKHaitA78QMyggegUIARC-AQ..i&amp;docid=VqUhrcfy4N1RJM&amp;w=400&amp;h=400&amp;q=g%2B%2B&amp;safe=strict&amp;ved=2ahUKEwjPudKBkojwAhUJ8ZQKHaitA78QMyggegUIARC-AQ</a><br>tags: g++，c++</p><ol><li><h3 id="error-invalid-covariant-return-type-for（非法的协变返回类型）"><a href="#error-invalid-covariant-return-type-for（非法的协变返回类型）" class="headerlink" title="error: invalid covariant return type for（非法的协变返回类型）"></a>error: invalid covariant return type for（非法的协变返回类型）</h3><p><img src="https://myblogpic-1259595840.cos.ap-hongkong.myqcloud.com/img/image-20210418235057483.png" srcset="/img/loading.gif" alt="image-20210418235057483"></p><p>c++允许在派生类中定义和基类同名的函数，比如BrassPlus类由Brass类派生而来，则可定义以下两个同名函数</p><div class="hljs"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">virtual</span> returntype <span class="hljs-title">Brass::ViewAcct</span><span class="hljs-params">(parameter <span class="hljs-built_in">list</span>)</span></span>&#123;    <span class="hljs-comment">//...</span>&#125;<span class="hljs-function"><span class="hljs-keyword">virtual</span> returntype <span class="hljs-title">BrassPlus::ViewAcct</span><span class="hljs-params">(parameter <span class="hljs-built_in">list</span>)</span></span>&#123;    <span class="hljs-comment">//...</span>&#125;</code></pre></div><p>在不涉及继承和派生的概念时，可以设计同名不同参数的函数实现<strong><code>重载</code></strong>功能，例如设计三个打印函数分别打印整型、浮点型或者字符型，此时会根据给定的参数选择正确的函数执行，这个过程由编译器完成，叫做<strong><code>静态联编</code></strong> 。</p><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-keyword">void</span> print（<span class="hljs-keyword">int</span> i）&#123;     <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"整型"</span>&lt;&lt;i&lt;&lt;<span class="hljs-built_in">endl</span>;&#125;<span class="hljs-keyword">void</span> print（<span class="hljs-keyword">float</span> i）&#123;     <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"浮点型"</span>&lt;&lt;i&lt;&lt;<span class="hljs-built_in">endl</span>;&#125;<span class="hljs-keyword">void</span> print（<span class="hljs-keyword">char</span> i）&#123;     <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"字符型"</span>&lt;&lt;i&lt;&lt;<span class="hljs-built_in">endl</span>;&#125;</code></pre></div><p>而在继承关系中，实现在派生类和基类之间重载的同名函数的重载，这涉及虚函数概念：会在运行过程中根据指针或者引用所指具体对象的具体类型选择正确的虚函数进行执行，这被称为<strong><code>动态联编</code></strong> 。</p><p>比如想实现以下</p><div class="hljs"><pre><code class="hljs cpp">Brass *p1,*p2;<span class="hljs-function">Brass <span class="hljs-title">b1</span><span class="hljs-params">(构造函数的参数)</span></span>;<span class="hljs-function">BrassPlus <span class="hljs-title">b2</span><span class="hljs-params">(构造函数的参数)</span></span>;p1=&amp;b1;p2=&amp;b2;p1-&gt;ViewAcct(parameter <span class="hljs-built_in">list</span>);<span class="hljs-comment">//自动调用Brass::ViewAcct()</span>p2-&gt;ViewAcct(parameter <span class="hljs-built_in">list</span>);<span class="hljs-comment">//自动调用BrassPlus::ViewAcct()</span></code></pre></div><p>就必须满足以下两点</p><blockquote><ol><li><p>参数必须完全一致，否则将会隐藏同名的基类方法，试图调用此基类方法的行为是非法的。</p></li><li><p>其次返回类型也要完全一致，但只有一种情况例外——如果返回类型是基类引用或指针，则可以修改为指向派生类的引用或指针。这种特性被称为<code>**返回类型协变**</code>。</p></li></ol></blockquote><p>所谓“非法的协变返回类型”就是指没有按照协变规则正确的设计函数的返回类型，应当检查需要重载的函数返回类型是否为正确的引用或者指针。</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>fattree(k=4)源码以及pox控制器的使用</title>
    <link href="/2021/03/31/fattree(k=4)/"/>
    <url>/2021/03/31/fattree(k=4)/</url>
    
    <content type="html"><![CDATA[<div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><span class="hljs-keyword">from</span> mininet.topo <span class="hljs-keyword">import</span> Topo<span class="hljs-keyword">from</span> mininet.net <span class="hljs-keyword">import</span> Mininet<span class="hljs-keyword">from</span> mininet.node <span class="hljs-keyword">import</span> CPULimitedHost<span class="hljs-keyword">from</span> mininet.link <span class="hljs-keyword">import</span> TCLink<span class="hljs-keyword">from</span> mininet.util <span class="hljs-keyword">import</span> dumpNodeConnections<span class="hljs-keyword">from</span> mininet.log <span class="hljs-keyword">import</span> setLogLevel<span class="hljs-keyword">from</span> mininet.cli <span class="hljs-keyword">import</span> CLI<span class="hljs-keyword">from</span> mininet.node <span class="hljs-keyword">import</span> Controller,RemoteController,OVSController,OVSKernelSwitch,Host<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FatTreeTopo</span><span class="hljs-params">(Topo)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,**opts )</span>:</span>        Topo.__init__( self, **opts )        L1 = <span class="hljs-number">4</span>        L2 = L1 * <span class="hljs-number">2</span>         L3 = L2        c = []        a = []        e = []      <span class="hljs-comment"># add core ovs  </span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range( L1 ):        sw = self.addSwitch( <span class="hljs-string">'c&#123;&#125;'</span>.format( i + <span class="hljs-number">1</span> ) , cls=OVSKernelSwitch)        c.append( sw )        <span class="hljs-comment"># add aggregation ovs</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range( L2 ):        sw = self.addSwitch( <span class="hljs-string">'a&#123;&#125;'</span>.format( L1 +i + <span class="hljs-number">1</span> ) , cls=OVSKernelSwitch)        a.append( sw )    <span class="hljs-comment"># add edge ovs</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range( L3 ):            sw = self.addSwitch( <span class="hljs-string">'e&#123;&#125;'</span>.format( L1 +L2 + i + <span class="hljs-number">1</span> ) , cls=OVSKernelSwitch)            e.append( sw )    <span class="hljs-comment"># add links between core and aggregation ovs</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range( L1 ):            sw1 = c[i]            <span class="hljs-keyword">for</span> sw2 <span class="hljs-keyword">in</span> a[i//<span class="hljs-number">2</span>::L1//<span class="hljs-number">2</span>]:                                self.addLink( sw2, sw1, bw=<span class="hljs-number">10</span>, delay=<span class="hljs-string">'5ms'</span>, loss=<span class="hljs-number">0</span>, max_queue_size=<span class="hljs-number">1000</span>, use_htb=<span class="hljs-literal">True</span> )    <span class="hljs-comment"># add links between aggregation and edge ovs</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range( <span class="hljs-number">0</span>, L2, <span class="hljs-number">2</span> ):            <span class="hljs-keyword">for</span> sw1 <span class="hljs-keyword">in</span> a[i:i+<span class="hljs-number">2</span>]:                <span class="hljs-keyword">for</span> sw2 <span class="hljs-keyword">in</span> e[i:i+<span class="hljs-number">2</span>]:                    self.addLink( sw2, sw1, bw=<span class="hljs-number">10</span>, delay=<span class="hljs-string">'5ms'</span>, loss=<span class="hljs-number">0</span>, max_queue_size=<span class="hljs-number">1000</span>, use_htb=<span class="hljs-literal">True</span> )    <span class="hljs-comment">#add hosts and its links with edge ovs</span>        count = <span class="hljs-number">1</span>        <span class="hljs-keyword">for</span> sw1 <span class="hljs-keyword">in</span> e:            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>):                host = self.addHost( <span class="hljs-string">'h&#123;&#125;'</span>.format( count ), cpu=<span class="hljs-number">.5</span>/<span class="hljs-number">16</span>,cls=Host)                self.addLink( sw1, host, bw=<span class="hljs-number">10</span>, delay=<span class="hljs-string">'5ms'</span>, loss=<span class="hljs-number">0</span>, max_queue_size=<span class="hljs-number">1000</span>, use_htb=<span class="hljs-literal">True</span> )                count+=<span class="hljs-number">1</span><span class="hljs-string">'''def Test():    "Create network and run simple performance test"    topo = FatTreeTopo()    net = Mininet(topo=topo,host=CPULimitedHost, link=TCLink)    net.start()    CLI(net)    net.stop()if __name__=='__main__':    setLogLevel('info')    Test()'''</span>topos = &#123; <span class="hljs-string">'mytopo'</span>: ( <span class="hljs-keyword">lambda</span>: FatTreeTopo() ) &#125;</code></pre></div><p>开启pox代码</p><p><code>./pox.py forwarding.l2_learning openflow.spanning_tree --no-flood --hold-down log.level --DEBUG samples.pretty_log openflow.discovery  messenger messenger.log_service messenger.ajax_transport openflow.of_service host_tracker openflow.of_01 --address=127.0.0.1 --port=6634 py</code></p><div class="hljs"><pre><code class="hljs plain"></code></pre></div><p>mininet开始生成拓扑</p><p><code>sudo mn --custom FatTree.py --topo mytopo --controller=remote,ip=127.0.0.1,port=6634</code></p>]]></content>
    
    
    <categories>
      
      <category>404</category>
      
    </categories>
    
    
    <tags>
      
      <tag>404</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次攻击</title>
    <link href="/2020/10/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%94%BB%E5%87%BB/"/>
    <url>/2020/10/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<p>无意间看到苗哥网站评论区</p><p>就先发了一个&lt;1&gt;</p><p>查看其对应源代码为</p><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/blog/viewarticle/72"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre></div><p>发现其并未过滤&lt;和&gt;</p><p>然后评论</p><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">alert(<span class="hljs-string">"我是苗爹"</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><script>alert("我是苗爹")</script><p>但是只有点这条超链接才会执行</p><p>其对应源代码为</p><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/blog/viewarticle/71"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">alert(<span class="hljs-string">"我是苗爹"</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre></div><p>所以要先封锁<h5>，</p><p>再封锁<a>，</p><p>自然要将评论改为</p><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">alert(<span class="hljs-string">"此网站因违法发布色情暴力内容，其持有者已被行政拘留。"</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><p>然后成功  如下图所示</p><p><img src="/img/post/miao3.jpg" srcset="/img/loading.gif" alt="image-20201026020502306"></p>]]></content>
    
    
    <categories>
      
      <category>404</category>
      
    </categories>
    
    
    <tags>
      
      <tag>404</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的过敏性鼻炎抗争史</title>
    <link href="/2020/10/01/%E8%BF%87%E6%95%8F%E6%80%A7%E9%BC%BB%E7%82%8E/"/>
    <url>/2020/10/01/%E8%BF%87%E6%95%8F%E6%80%A7%E9%BC%BB%E7%82%8E/</url>
    
    <content type="html"><![CDATA[<h3 id="男的女的折磨之过敏性鼻炎"><a href="#男的女的折磨之过敏性鼻炎" class="headerlink" title="男的女的折磨之过敏性鼻炎"></a>男的女的折磨之过敏性鼻炎</h3><blockquote><p>  ​        过敏性鼻炎（Allergic rhinitis），又称为鼻敏感、干草热、花粉热、花粉症或季节性过敏性鼻炎，是因为免疫系统受到空气中的过敏原影响而导致的鼻炎症状，是一种人体自我保护的免疫机制所产生的排斥反应，一种主要病因是先天性气管毛病，使鼻腔对天气变化、花粉、尘埃或特定致敏原产生过敏。<br>  ——维基百科</p></blockquote><p><img src="/img/post/biyanbaby.jpg" srcset="/img/loading.gif" alt="">        </p><p>​        我的症状：<br>​        发病期集中在换季期，主要是冬→春，夏→秋两个时期。发病时，会首先感觉到鼻腔一阵瘙痒或者说刺痒，接踵而来的是一套喷嚏n连打，然后就是流鼻涕，擦鼻涕，打喷嚏，流鼻涕，擦鼻涕的反复循环折磨。</p><p>​        伴随困扰：<br>​        首先，手头不能缺卫生纸，用纸量非常可观，目测一天一棵树（bushi）。<br>其次，上课时候很不方便，一直擦鼻涕，力气小了还擦不干净，就算同学可以理解，自己心里也会过意不去，所以我经常翘课：）</p><p>​        生活中会有很多无比尴尬的时刻。<br>​        到处找不到纸，只得用其它不合时宜的物品解决，比如口罩。<br>​        再比如你精心打扮准备出街邂逅plmm，一套喷嚏连招突然亮相，瞬间破功，灰头土脸。<br>一直打喷嚏流鼻涕，自己难受不说，根本也丧失了与人正常交流的权利，话都没说半句，就是一张纸怼到鼻子上。</p><p>​        解决方法：<br>​        期间用了很多东西，感冒药除了让自己白天更困以外没有任何作用；洗鼻器有效时间太短，隔两三个小时就要喷一次，太折磨。直到前几天在知乎无意间刷到辅舒良＋氯雷他定片的组合很受欢迎，于是买来试了一下，效果真的非常显著。自从用了这个药，喷嚏不打了，鼻涕不流了，妹妹的微信也能加到了。<br>​        辅舒良早晚各喷一次，氯雷他定片每晚睡前服用一片，还可以有助睡眠，真的解决了我很大的问题，强烈给病友推荐。</p><p>就是这两个东西</p><p><img src="/img/post/mdecine.jpg" srcset="/img/loading.gif" alt="就是这两个东西">    </p><h3 id="不用擦鼻涕实在太爽了。"><a href="#不用擦鼻涕实在太爽了。" class="headerlink" title="不用擦鼻涕实在太爽了。"></a>不用擦鼻涕实在太爽了。</h3>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>git的简单操作</title>
    <link href="/2020/09/11/git%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/09/11/git%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<ol><li><h6 id="初始化一个Git仓库，使用git-init命令。"><a href="#初始化一个Git仓库，使用git-init命令。" class="headerlink" title="初始化一个Git仓库，使用git init命令。"></a>初始化一个Git仓库，使用<code>git init</code>命令。</h6></li><li><h6 id="添加文件到Git仓库，分两步："><a href="#添加文件到Git仓库，分两步：" class="headerlink" title="添加文件到Git仓库，分两步："></a>添加文件到Git仓库，分两步：</h6><ol><li><h6 id="使用命令git-add-lt-file-gt-，注意，可反复多次使用，添加多个文件；"><a href="#使用命令git-add-lt-file-gt-，注意，可反复多次使用，添加多个文件；" class="headerlink" title="使用命令git add &lt;file&gt;，注意，可反复多次使用，添加多个文件；"></a>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</h6></li><li><h6 id="使用命令git-commit-m-lt-message-gt-，完成。"><a href="#使用命令git-commit-m-lt-message-gt-，完成。" class="headerlink" title="使用命令git commit -m &lt;message&gt;，完成。"></a>使用命令<code>git commit -m &lt;message&gt;</code>，完成。</h6></li></ol></li><li><h6 id="要随时掌握工作区的状态，使用git-status命令。"><a href="#要随时掌握工作区的状态，使用git-status命令。" class="headerlink" title="要随时掌握工作区的状态，使用git status命令。"></a>要随时掌握工作区的状态，使用<code>git status</code>命令。</h6></li><li><h6 id="如果git-status告诉你有文件被修改过，用git-diff可以查看修改内容。"><a href="#如果git-status告诉你有文件被修改过，用git-diff可以查看修改内容。" class="headerlink" title="如果git status告诉你有文件被修改过，用git diff可以查看修改内容。"></a>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</h6></li><li><h6 id="HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git-reset-–hard-commit-id"><a href="#HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git-reset-–hard-commit-id" class="headerlink" title="HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset –hard commit_id"></a>HEAD<code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令</code>git reset –hard commit_id</h6></li><li><h6 id="穿梭前，用git-log可以查看提交历史，以便确定要回退到哪个版本。"><a href="#穿梭前，用git-log可以查看提交历史，以便确定要回退到哪个版本。" class="headerlink" title="穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。"></a>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</h6></li><li><h6 id="要重返未来，用git-reflog查看命令历史，以便确定要回到未来的哪个版本。"><a href="#要重返未来，用git-reflog查看命令历史，以便确定要回到未来的哪个版本。" class="headerlink" title="要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。"></a>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</h6></li><li><h6 id="暂存区是Git非常重要的概念，弄明白了暂存区，就弄明白了Git的很多操作到底干了什么。"><a href="#暂存区是Git非常重要的概念，弄明白了暂存区，就弄明白了Git的很多操作到底干了什么。" class="headerlink" title="暂存区是Git非常重要的概念，弄明白了暂存区，就弄明白了Git的很多操作到底干了什么。"></a>暂存区是Git非常重要的概念，弄明白了暂存区，就弄明白了Git的很多操作到底干了什么。</h6><ul><li><img src="https://www.liaoxuefeng.com/files/attachments/919020074026336/0" srcset="/img/loading.gif" alt=""></li></ul></li><li><h6 id="每次修改，如果不用git-add到暂存区，那就不会加入到commit中。"><a href="#每次修改，如果不用git-add到暂存区，那就不会加入到commit中。" class="headerlink" title="每次修改，如果不用git add到暂存区，那就不会加入到commit中。"></a>每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中。</h6></li><li><ol><li><h6 id="你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git-checkout-file，就是让这个文件回到最近一次git-commit或git-add时的状态。"><a href="#你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git-checkout-file，就是让这个文件回到最近一次git-commit或git-add时的状态。" class="headerlink" title="你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file，就是让这个文件回到最近一次git commit或git add时的状态。"></a>你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</h6></li><li><h6 id="你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git-reset-HEAD-lt-file-gt-，就回到了10，第二步按10操作。"><a href="#你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git-reset-HEAD-lt-file-gt-，就回到了10，第二步按10操作。" class="headerlink" title="你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD &lt;file&gt;，就回到了10，第二步按10操作。"></a>你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了10，第二步按10操作。</h6></li><li><h6 id="已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退，不过前提是没有推送到远程库。"><a href="#已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退，不过前提是没有推送到远程库。" class="headerlink" title="已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退，不过前提是没有推送到远程库。"></a>已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退，不过前提是没有推送到远程库。</h6></li><li><h6 id="命令git-rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。"><a href="#命令git-rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。" class="headerlink" title="命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。"></a>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong>。</h6></li></ol></li><li><h6 id="通过SSH连接远程仓库："><a href="#通过SSH连接远程仓库：" class="headerlink" title="通过SSH连接远程仓库："></a>通过SSH连接远程仓库：</h6><ol><li><h6 id="本地电脑生成ssh秘钥——公钥私钥"><a href="#本地电脑生成ssh秘钥——公钥私钥" class="headerlink" title="本地电脑生成ssh秘钥——公钥私钥"></a>本地电脑生成ssh秘钥——公钥私钥</h6><blockquote><ul><li><h6 id="打开git-bash-默认目录-输入下面命令生成email的ssh秘钥"><a href="#打开git-bash-默认目录-输入下面命令生成email的ssh秘钥" class="headerlink" title="打开git bash 默认目录,输入下面命令生成email的ssh秘钥"></a>打开git bash 默认目录,输入下面命令生成email的ssh秘钥</h6></li><li><h6 id="ssh-keygen-t-rsa-C-“youreamil”"><a href="#ssh-keygen-t-rsa-C-“youreamil”" class="headerlink" title="ssh-keygen -t rsa -C “youreamil”"></a>ssh-keygen -t rsa -C “youreamil”</h6></li><li><h6 id="根据git-bash-的回复的秘钥目录找到id-rsa和id-rsa-pub"><a href="#根据git-bash-的回复的秘钥目录找到id-rsa和id-rsa-pub" class="headerlink" title="根据git bash 的回复的秘钥目录找到id_rsa和id_rsa.pub"></a>根据git bash 的回复的秘钥目录找到id_rsa和id_rsa.pub</h6></li><li><h6 id="复制公钥-id-rsa-pub内容与git仓库设置中绑定ssh-key"><a href="#复制公钥-id-rsa-pub内容与git仓库设置中绑定ssh-key" class="headerlink" title="复制公钥 id_rsa.pub内容与git仓库设置中绑定ssh key"></a>复制公钥 id_rsa.pub内容与git仓库设置中绑定ssh key</h6></li></ul></blockquote></li><li><h6 id="在第三方git仓库绑定SSH秘钥——如gittee（码云）-github"><a href="#在第三方git仓库绑定SSH秘钥——如gittee（码云）-github" class="headerlink" title="在第三方git仓库绑定SSH秘钥——如gittee（码云） github"></a>在第三方git仓库绑定SSH秘钥——如gittee（码云） github</h6></li></ol></li><li><h6 id="关联远程库"><a href="#关联远程库" class="headerlink" title="关联远程库"></a>关联远程库</h6><ol><li><h6 id="要关联一个远程库，使用命令git-remote-add-origin-git-server-name-path-repo-name-git；"><a href="#要关联一个远程库，使用命令git-remote-add-origin-git-server-name-path-repo-name-git；" class="headerlink" title="要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；"></a>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</h6></li><li><h6 id="关联后，使用命令git-push-u-origin-master第一次推送master分支的所有内容；"><a href="#关联后，使用命令git-push-u-origin-master第一次推送master分支的所有内容；" class="headerlink" title="关联后，使用命令git push -u origin master第一次推送master分支的所有内容；"></a>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</h6></li><li><h6 id="此后，每次本地提交后，只要有必要，就可以使用命令git-push-origin-master推送最新修改；"><a href="#此后，每次本地提交后，只要有必要，就可以使用命令git-push-origin-master推送最新修改；" class="headerlink" title="此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；"></a>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</h6></li></ol></li><li><h6 id="要克隆一个仓库，首先必须知道仓库的地址，然后使用git-clone命令克隆。"><a href="#要克隆一个仓库，首先必须知道仓库的地址，然后使用git-clone命令克隆。" class="headerlink" title="要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。"></a>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。</h6><h6 id="Git支持多种协议，包括https，但ssh协议速度最快。"><a href="#Git支持多种协议，包括https，但ssh协议速度最快。" class="headerlink" title="Git支持多种协议，包括https，但ssh协议速度最快。"></a>Git支持多种协议，包括<code>https</code>，但<code>ssh</code>协议速度最快。</h6></li><li><h6 id="Git鼓励大量使用分支："><a href="#Git鼓励大量使用分支：" class="headerlink" title="Git鼓励大量使用分支："></a>Git鼓励大量使用分支：</h6><ol><li><h6 id="查看分支：git-branch创建分支：git-branch-lt-name-gt"><a href="#查看分支：git-branch创建分支：git-branch-lt-name-gt" class="headerlink" title="查看分支：git branch创建分支：git branch &lt;name&gt;"></a>查看分支：<code>git branch</code>创建分支：<code>git branch &lt;name&gt;</code></h6></li><li><h6 id="切换分支：git-checkout-lt-name-gt-或者git-switch-lt-name-gt"><a href="#切换分支：git-checkout-lt-name-gt-或者git-switch-lt-name-gt" class="headerlink" title="切换分支：git checkout &lt;name&gt;或者git switch &lt;name&gt;"></a>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></h6></li><li><h6 id="创建-切换分支：git-checkout-b-lt-name-gt-或者git-switch-c-lt-name-gt"><a href="#创建-切换分支：git-checkout-b-lt-name-gt-或者git-switch-c-lt-name-gt" class="headerlink" title="创建+切换分支：git checkout -b &lt;name&gt;或者git switch -c &lt;name&gt;"></a>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></h6></li><li><h6 id="合并某分支到当前分支：git-merge-lt-name-gt"><a href="#合并某分支到当前分支：git-merge-lt-name-gt" class="headerlink" title="合并某分支到当前分支：git merge &lt;name&gt;"></a>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></h6></li><li><h6 id="删除分支：git-branch-d-lt-name-gt"><a href="#删除分支：git-branch-d-lt-name-gt" class="headerlink" title="删除分支：git branch -d &lt;name&gt;"></a>删除分支：<code>git branch -d &lt;name&gt;</code></h6></li></ol></li><li><h6 id="当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。"><a href="#当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。" class="headerlink" title="当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。"></a>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</h6><h6 id="解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。"><a href="#解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。" class="headerlink" title="解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。"></a>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</h6><h6 id="用git-log-graph命令可以看到分支合并图。"><a href="#用git-log-graph命令可以看到分支合并图。" class="headerlink" title="用git log --graph命令可以看到分支合并图。"></a>用<code>git log --graph</code>命令可以看到分支合并图。</h6></li><li><p>余下的下次学习<a href="https://www.liaoxuefeng.com/wiki/896043488029600/900005860592480" target="_blank" rel="noopener">更新</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>硬核显示技术科普</title>
    <link href="/2020/08/04/%E7%A1%AC%E6%A0%B8%E6%98%BE%E7%A4%BA%E6%8A%80%E6%9C%AF%E7%A7%91%E6%99%AE/"/>
    <url>/2020/08/04/%E7%A1%AC%E6%A0%B8%E6%98%BE%E7%A4%BA%E6%8A%80%E6%9C%AF%E7%A7%91%E6%99%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="显示器"><a href="#显示器" class="headerlink" title="显示器"></a><strong>显示器</strong></h3><blockquote><p>  显示器（display）通常也被称为监视器。显示器是属于电脑的<a href="https://baike.baidu.com/item/I%2FO设备" target="_blank" rel="noopener">I/O设备</a>，即<a href="https://baike.baidu.com/item/输入输出设备/8166762" target="_blank" rel="noopener">输入输出设备</a>。它是一种将一定的电子文件通过特定的传输设备显示到屏幕上再反射到人眼的显示工具。</p></blockquote><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><h5 id="CRT显像管显示器过于久远"><a href="#CRT显像管显示器过于久远" class="headerlink" title="CRT显像管显示器过于久远"></a>CRT显像管显示器过于久远</h5><blockquote><ul><li>CRT显示器的核心部件是CRT显像管，CRT显像管使用电子枪发射高速电子，利用垂直和水平的偏转线圈控制高速电子的偏转角度，通过电压来调节电子束的功率，经过调节高速电子击打屏幕上的磷光物质，在屏幕上形成明暗不同图形和文字。</li><li>彩色显像管屏幕上的每一个像素点都由红、绿、蓝三种<a href="https://wiki.mbalib.com/wiki/涂料" target="_blank" rel="noopener">涂料</a>组合而成，由三束电子束分别激活这三种颜色的磷光涂料，以不同强度的电子束调节三种颜色的明暗程度就可得到所需的颜色。为了让电子束瞄得精准，防止产生不正确的颜色或重像，必须对电子束进行精确的<a href="https://wiki.mbalib.com/wiki/控制" target="_blank" rel="noopener">控制</a>。</li></ul></blockquote></li><li><h5 id="LCD"><a href="#LCD" class="headerlink" title="LCD"></a>LCD</h5><blockquote><h4 id="液晶显示器-Liquid-Crystal-Display，LCD"><a href="#液晶显示器-Liquid-Crystal-Display，LCD" class="headerlink" title="液晶显示器(Liquid Crystal Display，LCD)"></a><strong>液晶显示器(Liquid Crystal Display，LCD)</strong></h4><p>  <img src="https://wx1.sinaimg.cn/orj360/0069Z3fPly1gheoh8pvnrj31250apwny.jpg" srcset="/img/loading.gif" alt=""></p><h6 id="偏光膜：只允许特定方向光通过"><a href="#偏光膜：只允许特定方向光通过" class="headerlink" title="偏光膜：只允许特定方向光通过"></a>偏光膜：只允许特定方向光通过</h6><ul><li><p><img src="https://wx3.sinaimg.cn/orj360/0069Z3fPly1gheoh90ip1j30ic08m43i.jpg" srcset="/img/loading.gif" alt=""></p></li><li><p><img src="https://wx3.sinaimg.cn/orj360/0069Z3fPly1gheoh99yjoj30lr08o7ag.jpg" srcset="/img/loading.gif" alt=""></p></li><li><p>通过改变电压改变液晶层的扭曲方式从而控制背光板发出的光透过滤光片的程度，从而控制人眼看到的颜色和亮度</p><h6 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h6></li><li><p>技术成熟，价格低廉</p></li><li><p>无法显示纯黑色，导致画面对比度不够大</p></li><li><p>80%光都被过滤，一定亮度需要更大功耗</p></li><li><p>LED是把LCD的背光板换成了LED背光板，本质上还是液晶显示器</p><h6 id="详细了解OLED请点👉-这里"><a href="#详细了解OLED请点👉-这里" class="headerlink" title="详细了解OLED请点👉          ** 这里**"></a>详细了解OLED请点👉          ** <a href="[https://zh.wikipedia.org/zh-cn/%E6%B6%B2%E6%99%B6%E6%98%BE%E7%A4%BA%E5%99%A8](https://zh.wikipedia.org/zh-cn/液晶显示器)">这里</a>**</h6></li></ul></blockquote></li><li><h5 id="OLED"><a href="#OLED" class="headerlink" title="OLED"></a>OLED</h5><blockquote><ul><li><h6 id="OLED技术（organic-light-emitting-diode-有机发光二极管"><a href="#OLED技术（organic-light-emitting-diode-有机发光二极管" class="headerlink" title="OLED技术（organic light-emitting diode)  有机发光二极管"></a><strong>OLED技术（organic light-emitting diode)  有机发光二极管</strong></h6></li><li><h6 id=""><a href="#" class="headerlink" title=""></a><img src="http://zmq-upload-file-imgs.oss-cn-hangzhou.aliyuncs.com/article/36225-196dc7ed7e8eae475a577f007514f59b" srcset="/img/loading.gif" alt=""></h6></li><li><h6 id="OLED的基本结构是在铟锡氧化物（ITO）玻璃上制作一层几十纳米厚的有机发光材料作发光层，发光层上方有一层低功函数的金属电极，构成如三明治的结构。"><a href="#OLED的基本结构是在铟锡氧化物（ITO）玻璃上制作一层几十纳米厚的有机发光材料作发光层，发光层上方有一层低功函数的金属电极，构成如三明治的结构。" class="headerlink" title="OLED的基本结构是在铟锡氧化物（ITO）玻璃上制作一层几十纳米厚的有机发光材料作发光层，发光层上方有一层低功函数的金属电极，构成如三明治的结构。"></a>OLED的基本结构是在铟锡氧化物（ITO）玻璃上制作一层几十纳米厚的有机发光材料作发光层，发光层上方有一层低功函数的金属电极，构成如三明治的结构。</h6></li><li><h6 id="简单来说，OLED技术是自发光的，所以会有很多优点"><a href="#简单来说，OLED技术是自发光的，所以会有很多优点" class="headerlink" title="简单来说，OLED技术是自发光的，所以会有很多优点"></a>简单来说，OLED技术是自发光的，所以会有很多优点</h6><ul><li>黑色显示，OLED只需要熄灭发光有机物即可，可以做到极致的黑，而LED只能做到像是类似窗帘拉上挡住大部分太阳光的效果，所以OLED的屏幕会在夜间模式下功耗非常之小</li><li>亮度方面，因为没有任何遮挡所以，亮度也是OLED要胜过LCD许多</li><li>反应时间，OLED只需调整每个发光二极管，而LCD需要通过电压控制液晶的扭曲程度，显然OLED略胜一筹</li><li>视角问题，LCD的最佳视角颇为狭窄，而OLED可以达到最大 84 度的偏角观赏</li><li>功耗问题，同亮度问题，产生同样的亮度，OLED的功耗小很多</li></ul></li><li><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><ul><li>尺寸问题，由于制作工艺原因，制作尺寸比较大的OLED屏幕难度上升了很多个数量级，所以OLED目前应用在小规模屏幕，比如智能手表、智能手机等，而LCD已经拥有了成熟的制作工艺和市场，几乎所有大尺寸屏幕使用的都是LCD屏幕</li><li>寿命问题，因为OLED自发光，所以长期大功率使用条件下，OLED会出现点亮的化合物会随着时间的推移而降解的问题，也就是烧屏，不过只要不是刻意的滥用，几乎不会出现这种情况</li><li>价格方面，不言而喻，LCD赢得轻而易举</li></ul></li><li><h6 id="详细了解OLED请点👉-这里-1"><a href="#详细了解OLED请点👉-这里-1" class="headerlink" title="详细了解OLED请点👉          ** 这里**"></a>详细了解OLED请点👉          ** <a href="https://www.hangjianet.com/app/share/topicDetail?id=15422809007930000" target="_blank" rel="noopener">这里</a>**</h6></li></ul></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>科普</category>
      
    </categories>
    
    
    <tags>
      
      <tag>科普</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>和你一起了解“墙”</title>
    <link href="/2020/08/03/%E7%BF%BB%E5%A2%99%EF%BC%9F/"/>
    <url>/2020/08/03/%E7%BF%BB%E5%A2%99%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="Great-Firewall"><a href="#Great-Firewall" class="headerlink" title="Great Firewall"></a><strong>Great Firewall</strong></h3><blockquote><p>  ​        <strong>防火长城</strong>（英语：<strong>Great Firewall</strong>，常用简称：<strong>GFW</strong>，中文也称<strong>中国国家防火墙</strong>，中国大陆民众俗称<strong>墙</strong>、<strong>网络长城</strong>、<strong>功夫网</strong>防火长城等等），是对<a href="https://zh.wikipedia.org/wiki/中华人民共和国政府" target="_blank" rel="noopener">中华人民共和国政府</a>在其<a href="https://zh.wikipedia.org/wiki/互联网" target="_blank" rel="noopener">互联网</a>边界<a href="https://zh.wikipedia.org/wiki/互联网审查" target="_blank" rel="noopener">审查</a>系统（包括相关行政审查系统）的统称。此系统起步于1998年，其英文名称得自于2002年5月17日Charles R. Smith所写的一篇关于中国网络审查的文章《The Great Firewall of China》，取与Great Wall（<a href="https://zh.wikipedia.org/wiki/长城" target="_blank" rel="noopener">长城</a>）相谐的效果，简写为Great Firewall，缩写GFW。随着使用的拓广，中文“墙”和英文“GFW”有时也被用作动词，中国<a href="https://zh.wikipedia.org/wiki/網友" target="_blank" rel="noopener">网友</a>所说的“被墙”即指网站内容被防火长城所屏蔽或者指服务器的通讯被封阻，“翻墙”也被引申为<a href="https://zh.wikipedia.org/wiki/突破网络审查" target="_blank" rel="noopener">突破网络审查</a>浏览中国大陆境外被屏蔽的网站或使用服务的行为。</p></blockquote><p>​                                                                                                                                                —–来自维基百科</p><h3 id="GFW的出现"><a href="#GFW的出现" class="headerlink" title="GFW的出现"></a>GFW的出现</h3><blockquote><p>  ​        墙在十几年前是不存在的，国内可以访问境外的几乎所有网站，墙的出现给国内有访问境外网站的网民带来了很大的麻烦，所以一时间所有人都在抵制GFW，认为GFW是中国政府担心国外的信息流到国内，是一种变相的闭关锁国、对人民思想的禁锢。</p><p>  ​        但是其实墙的出现是有导火索的。2008年北京奥运会前夕，有恐怖组织在某国外网站计划在奥运会期间进行恐怖袭击，中国政府要求该网站配合调查，但是该网站以保护用户隐私等理由拒绝，于是中国开始搭建GFW以阻止该公司在中国大陆的业务，相继诸多大公司（比如Google，Amazon，甚至pornhub等）均被GFW拒之门外。</p></blockquote><h3 id="“墙”的工作方式"><a href="#“墙”的工作方式" class="headerlink" title="“墙”的工作方式"></a>“墙”的工作方式</h3><blockquote><ul><li><h5 id="域名解析服务缓存污染"><a href="#域名解析服务缓存污染" class="headerlink" title="域名解析服务缓存污染"></a>域名解析服务缓存污染</h5><ul><li>防火长城对所有经过骨干出口路由的位于<a href="https://zh.wikipedia.org/wiki/TCP" target="_blank" rel="noopener">TCP</a>与<a href="https://zh.wikipedia.org/wiki/用户数据报协议" target="_blank" rel="noopener">UDP</a>的53端口上的<a href="https://zh.wikipedia.org/wiki/DNS" target="_blank" rel="noopener">域名</a>查询请求进行<a href="https://zh.wikipedia.org/wiki/入侵检测系统" target="_blank" rel="noopener">IDS</a>检测，一经发现处于黑名单关键词中相匹配的域名查询请求，防火长城作为中间设备会向查询者返回虚假结果。由于通常的域名查询没有任何认证机制，而且域名查询通常基于的UDP协议是无连接不可靠的协议，查询者无法验证返回结果的正确性，而TCP协议则可以使用<a href="https://zh.wikipedia.org/zh-hans/防火长城#TCP连接重置" target="_blank" rel="noopener">TCP连接重置</a>来中断连接来阻止获得返回结果。</li><li><img src="https://wx4.sinaimg.cn/orj360/0069Z3fPgy1ghds9atwtgj30qy0gut9s.jpg" srcset="/img/loading.gif" alt=""></li></ul></li><li><h5 id="关键字阻断"><a href="#关键字阻断" class="headerlink" title="关键字阻断"></a>关键字阻断</h5><ul><li>当传输的数据流中含有一些敏感词时，GFW会审查出这些敏感词并将其源主机和目的主机之间的连接进行阻断</li></ul></li><li><h5 id="端口阻断"><a href="#端口阻断" class="headerlink" title="端口阻断"></a>端口阻断</h5><ul><li>GFW会在某些特定IP服务器的主机的特定端口进行端口阻断来切断VPN或者SSL的连接，比如443，22</li></ul></li><li><h5 id="IP地址批量阻断"><a href="#IP地址批量阻断" class="headerlink" title="IP地址批量阻断"></a>IP地址批量阻断</h5><ul><li>经过一段时间的积累，GFW在这些IP地址实施批量阻断，切断国内与其连接</li><li>还有更多方式可以自行寻找了解</li></ul></li></ul></blockquote><h3 id="主流“翻墙”手段"><a href="#主流“翻墙”手段" class="headerlink" title="主流“翻墙”手段"></a>主流“翻墙”手段</h3><blockquote><ul><li><h5 id="首先一点，由于各种原因，还是存在有许多国外的服务器在国内可以访问。"><a href="#首先一点，由于各种原因，还是存在有许多国外的服务器在国内可以访问。" class="headerlink" title="首先一点，由于各种原因，还是存在有许多国外的服务器在国内可以访问。"></a>首先一点，由于各种原因，还是存在有许多国外的服务器在国内可以访问。</h5></li><li><h5 id="VPN和http代理"><a href="#VPN和http代理" class="headerlink" title="VPN和http代理"></a>VPN和http代理</h5><ul><li><img src="https://wx3.sinaimg.cn/orj360/0069Z3fPgy1ghdsrb6yucj30qy0gumy7.jpg" srcset="/img/loading.gif" alt=""></li></ul></li><li><h5 id="shadowsocks-SSR-V2Ray"><a href="#shadowsocks-SSR-V2Ray" class="headerlink" title="shadowsocks SSR V2Ray"></a>shadowsocks SSR V2Ray</h5><ul><li>由于上述方式特征太过明显，GFW可以很轻易地识别特征并加以阻断，所以又出现了shadowsocks SSR V2Ray等一系列翻墙方式</li><li><img src="https://wx4.sinaimg.cn/orj360/0069Z3fPly1ghdt0ybfcuj30qy0gut9s.jpg" srcset="/img/loading.gif" alt=""></li><li>就是将数据流加密成GFW不再明文可见的形式，使其无法窥探到其中的关键字，从而实现“翻墙”</li></ul></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>科普</category>
      
    </categories>
    
    
    <tags>
      
      <tag>科普</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS7安装g++遇到的一个问题</title>
    <link href="/2020/08/01/CentOS7%E5%AE%89%E8%A3%85g++%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/"/>
    <url>/2020/08/01/CentOS7%E5%AE%89%E8%A3%85g++%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="使用yum-y-install-gcc-g-显示没有可用软件包-gcc-g-。"><a href="#使用yum-y-install-gcc-g-显示没有可用软件包-gcc-g-。" class="headerlink" title="使用yum -y install gcc-g++显示没有可用软件包 gcc-g++。"></a>使用yum -y install gcc-g++显示没有可用软件包 gcc-g++。</h2><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><div class="hljs"><pre><code class="hljs routeros">[root@localhost szl]# yum -y install gcc-g++已加载插件：fastestmirrorLoading<span class="hljs-built_in"> mirror </span>speeds <span class="hljs-keyword">from</span> cached hostfile * base: mirrors.aliyun.com * extras: mirrors.aliyun.com * updates: mirrors.cn99.com没有可用软件包 gcc-g++。错误：无须任何处理</code></pre></div><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><div class="hljs"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>localhost szl]# yum install gcc-c++已加载插件：fastestmirrorLoading mirror speeds <span class="hljs-keyword">from</span> cached hostfile * base: mirrors.aliyun.com * extras: mirrors.aliyun.com * updates: mirrors.cn99.com正在解决依赖关系--&gt; 正在检查事务---&gt; 软件包 gcc-c++.x86_64<span class="hljs-number">.0</span><span class="hljs-number">.4</span><span class="hljs-number">.8</span><span class="hljs-number">.5</span><span class="hljs-number">-39.</span>el7 将被 安装--&gt; 正在处理依赖关系 libstdc++-devel = <span class="hljs-number">4.8</span><span class="hljs-number">.5</span><span class="hljs-number">-39.</span>el7，它被软件包 gcc-c++<span class="hljs-number">-4.8</span><span class="hljs-number">.5</span><span class="hljs-number">-39.</span>el7.x86_64 需要--&gt; 正在检查事务---&gt; 软件包 libstdc++-devel.x86_64<span class="hljs-number">.0</span><span class="hljs-number">.4</span><span class="hljs-number">.8</span><span class="hljs-number">.5</span><span class="hljs-number">-39.</span>el7 将被 安装--&gt; 解决依赖关系完成依赖关系解决======================================================================================================================= Package                          架构                    版本                             源                     大小=======================================================================================================================正在安装: gcc-c++                          x86_64                  <span class="hljs-number">4.8</span><span class="hljs-number">.5</span><span class="hljs-number">-39.</span>el7                     base                  <span class="hljs-number">7.2</span> M为依赖而安装: libstdc++-devel                  x86_64                  <span class="hljs-number">4.8</span><span class="hljs-number">.5</span><span class="hljs-number">-39.</span>el7                     base                  <span class="hljs-number">1.5</span> M事务概要=======================================================================================================================安装  <span class="hljs-number">1</span> 软件包 (+<span class="hljs-number">1</span> 依赖软件包)总下载量：<span class="hljs-number">8.7</span> M安装大小：<span class="hljs-number">25</span> MIs <span class="hljs-keyword">this</span> ok [y/d/N]: yDownloading packages:(<span class="hljs-number">1</span>/<span class="hljs-number">2</span>): gcc-c++<span class="hljs-number">-4.8</span><span class="hljs-number">.5</span><span class="hljs-number">-39.</span>el7.x86_64.rpm                                                          | <span class="hljs-number">7.2</span> MB  <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">01</span>     (<span class="hljs-number">2</span>/<span class="hljs-number">2</span>): libstdc++-devel<span class="hljs-number">-4.8</span><span class="hljs-number">.5</span><span class="hljs-number">-39.</span>el7.x86_64.rpm                                                  | <span class="hljs-number">1.5</span> MB  <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">05</span>     -----------------------------------------------------------------------------------------------------------------------总计                                                                                   <span class="hljs-number">1.5</span> MB/s | <span class="hljs-number">8.7</span> MB  <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">05</span>     Running transaction checkRunning transaction testTransaction test succeededRunning transaction  正在安装    : libstdc++-devel<span class="hljs-number">-4.8</span><span class="hljs-number">.5</span><span class="hljs-number">-39.</span>el7.x86_64                                                                <span class="hljs-number">1</span>/<span class="hljs-number">2</span>   正在安装    : gcc-c++<span class="hljs-number">-4.8</span><span class="hljs-number">.5</span><span class="hljs-number">-39.</span>el7.x86_64                                                                        <span class="hljs-number">2</span>/<span class="hljs-number">2</span>   验证中      : gcc-c++<span class="hljs-number">-4.8</span><span class="hljs-number">.5</span><span class="hljs-number">-39.</span>el7.x86_64                                                                        <span class="hljs-number">1</span>/<span class="hljs-number">2</span>   验证中      : libstdc++-devel<span class="hljs-number">-4.8</span><span class="hljs-number">.5</span><span class="hljs-number">-39.</span>el7.x86_64                                                                <span class="hljs-number">2</span>/<span class="hljs-number">2</span> 已安装:  gcc-c++.x86_64 <span class="hljs-number">0</span>:<span class="hljs-number">4.8</span><span class="hljs-number">.5</span><span class="hljs-number">-39.</span>el7                                                                                        作为依赖被安装:  libstdc++-devel.x86_64 <span class="hljs-number">0</span>:<span class="hljs-number">4.8</span><span class="hljs-number">.5</span><span class="hljs-number">-39.</span>el7                                                                                完毕！</code></pre></div><p>不知道为什么使用yum install gcc-g++就可以解决</p><p>下面是百度搜到的一个讲解，貌似没有提到</p><blockquote><p>  在linux中，经常使用yum来进行软件的安装，更新与卸载，那我们会发现，在使用yum的时候，通常有下面两种指令模式：</p>  <div class="hljs"><pre><code class="hljs c">①yum install xxx ②yum -y install xx</code></pre></div><p>   那这两种方式有什么不同呢？对于小白来说这是挺容易困惑的事。</p><div class="hljs"><pre><code>其实呢，这两种方式，用起来的作用是一样的，都能成功的对软件进行操作。那不同的地方就在于①在安装或卸载的过程中，会询问用户 ：is that ok？ ②则是将y直接以参数的方式附在指令上，后面就不会有这种询问语句了。</code></pre></div><p>  -——————–<br>  作者：OUCFSB<br>  来源：CSDN<br>  原文：<a href="https://blog.csdn.net/OUCFSB/article/details/80106993" target="_blank" rel="noopener">https://blog.csdn.net/OUCFSB/article/details/80106993</a><br>  版权声明：本文为博主原创文章，转载请附上博文链接！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模复习2020</title>
    <link href="/2020/06/13/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%A4%8D%E4%B9%A02020/"/>
    <url>/2020/06/13/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%A4%8D%E4%B9%A02020/</url>
    
    <content type="html"><![CDATA[<ul><li><input checked="" disabled="" type="checkbox"> <h5 id="数学建模的概念"><a href="#数学建模的概念" class="headerlink" title="数学建模的概念"></a>数学建模的概念</h5><ul><li>就是根据实际问题来建立数学模型，对数学模型来进行求解，然后根据结果去解决实际问题。</li></ul></li><li><input checked="" disabled="" type="checkbox"> <h5 id="数学模型的定义"><a href="#数学模型的定义" class="headerlink" title="数学模型的定义"></a>数学模型的定义</h5><ul><li>数学模型是运用数理逻辑方法和数学语言建构的科学或工程模型。</li></ul></li><li><input checked="" disabled="" type="checkbox"> <h5 id="一般步骤"><a href="#一般步骤" class="headerlink" title="一般步骤"></a>一般步骤</h5><ul><li>准备</li><li>假设</li><li>建立</li><li>求解</li><li>分析</li><li>检验</li></ul></li><li><input checked="" disabled="" type="checkbox"> <h5 id="放射性问题处理问题，主要是转变成什么样的问题，最关键是解决什么问题，"><a href="#放射性问题处理问题，主要是转变成什么样的问题，最关键是解决什么问题，" class="headerlink" title="放射性问题处理问题，主要是转变成什么样的问题，最关键是解决什么问题，"></a>放射性问题处理问题，主要是转变成什么样的问题，最关键是解决什么问题，</h5><ul><li>简答题：要知道关键解决了什么<ul><li>圆桶至多承受多大速度的碰撞</li><li>圆桶和海底碰撞时的速度有多大</li></ul></li><li>转变成了木桶在海里速度求解问题</li></ul></li><li><input checked="" disabled="" type="checkbox"> <h5 id="人口问题，要会建模，三种区别"><a href="#人口问题，要会建模，三种区别" class="headerlink" title="人口问题，要会建模，三种区别"></a>人口问题，要会建模，三种区别</h5><ul><li><p>马尔萨斯  </p></li><li><p>假设是什么：人口相对增长率r为常数</p><ul><li><p>$$<br>dP(t)/dt = rP(t)<br>$$</p></li><li><p>$$<br>P(t_0) = P_0<br>$$</p></li><li><p>$$<br>P(t) = P_0e^{r(t-t0)}<br>$$</p></li></ul></li><li><p>logistic </p><ul><li><p>为什么使用这个模型</p><ul><li><p>人口的自然增长率不可能是常数</p></li><li><p>$$<br>dP(t)/dt = r<del>(1-P(t)/K)</del>P(t)<br>$$</p></li><li><p>$$<br>P(t_0) = P_0<br>$$</p></li></ul></li></ul></li><li><p>马尔萨斯和logistic的区别</p><ul><li>人口相对增长率是不是常数的问题</li></ul></li><li><p>leslie </p><ul><li>与其他两个相比的优点<ul><li>给出了人口年龄分布</li></ul></li><li>矩阵的意义<ul><li>给出了各年龄人口的增长规律</li></ul></li></ul></li></ul></li><li><input checked="" disabled="" type="checkbox"> <h5 id="油画鉴定，用什么数学方法数学知识，怎么鉴定的，"><a href="#油画鉴定，用什么数学方法数学知识，怎么鉴定的，" class="headerlink" title="油画鉴定，用什么数学方法数学知识，怎么鉴定的，"></a>油画鉴定，用什么数学方法数学知识，怎么鉴定的，</h5><ul><li><p>简答题</p></li><li><p>用什么方法：通过测定样品中放射性元素铅和铀的含量测定油画的年龄来辨别真伪</p></li><li><p>怎么鉴定的：计算样品中铅和铀的含量和通过微分方程解出来的预测含量做对比</p></li></ul></li><li><input checked="" disabled="" type="checkbox"> <h5 id="丢魔方，涉及哪些数学知识，怎么解决的，解释参数的意义，"><a href="#丢魔方，涉及哪些数学知识，怎么解决的，解释参数的意义，" class="headerlink" title="丢魔方，涉及哪些数学知识，怎么解决的，解释参数的意义，"></a>丢魔方，涉及哪些数学知识，怎么解决的，解释参数的意义，</h5><ul><li><p>归结为什么数学问题：</p><ul><li>求出丢魔方对应的线性空间的一组基，基的任意组合就构成了所有的丢魔方</li></ul></li><li><p>怎么解决的：</p><ul><li>丢魔方空间和方程Ay=0同构得到魔方空间维度为7，然后找出七个基即可</li></ul></li></ul></li><li><input checked="" disabled="" type="checkbox"> <h5 id="公务员招聘"><a href="#公务员招聘" class="headerlink" title="公务员招聘"></a>公务员招聘</h5><ul><li><p>大概认识、最终归结为一个什么样的数学模型</p><ul><li><p>线性0-1规划问题、优化模型</p></li><li><p>给出决策变量、目标函数、约束条件</p></li><li><p>信息量化处理</p></li><li><p>数据归一化处理</p></li></ul></li></ul></li><li><input checked="" disabled="" type="checkbox"> <h5 id="遗传算法，粒子群算法，"><a href="#遗传算法，粒子群算法，" class="headerlink" title="遗传算法，粒子群算法，"></a>遗传算法，粒子群算法，</h5><ul><li>基本思想<ul><li>找出遗传规律</li></ul></li><li>步骤流程<ul><li>假设亲代与子代基因型规律，列出基因遗传规律的矩阵，求解</li></ul></li></ul></li><li><input checked="" disabled="" type="checkbox"> <h5 id="波斯弯的水，冰山，建模思路步骤方法，（不用写整个公式，"><a href="#波斯弯的水，冰山，建模思路步骤方法，（不用写整个公式，" class="headerlink" title="波斯弯的水，冰山，建模思路步骤方法，（不用写整个公式，"></a>波斯弯的水，冰山，建模思路步骤方法，（不用写整个公式，</h5><ul><li>船型<ul><li>租金</li><li>初始冰山体积</li></ul></li><li>船型和船速<ul><li>燃料费用</li></ul></li><li>融化规律</li><li>思路和方法<ul><li>根据特定的船型和船速求燃料费用</li><li>求租金总费用</li><li>求出总费用=租金＋燃料</li><li>根据船型得到初始冰山体积</li><li>根绝船型和船速求出第t天冰山消融的速率</li><li>计算运送 每立方米水的费用，并与海水淡化作比较</li></ul></li></ul></li><li><input checked="" disabled="" type="checkbox"> <h5 id="凳子放稳，会建模会证明结论"><a href="#凳子放稳，会建模会证明结论" class="headerlink" title="凳子放稳，会建模会证明结论"></a>凳子放稳，会建模会证明结论</h5><ul><li>大题</li></ul></li><li><input checked="" disabled="" type="checkbox"> <h5 id="战机规避路线，简单，整个都要会做出来"><a href="#战机规避路线，简单，整个都要会做出来" class="headerlink" title="战机规避路线，简单，整个都要会做出来"></a>战机规避路线，简单，整个都要会做出来</h5></li><li><p>梯度方向</p></li><li><input checked="" disabled="" type="checkbox"> <h5 id="森林管理"><a href="#森林管理" class="headerlink" title="森林管理"></a>森林管理</h5><ul><li>设置变量，写出线性规划模型<ul><li>按高度分组[    h(i),    h(i+1)    )</li><li>设置每组价值P_{i}</li><li>设置各组每次被砍的数目y_{i}</li><li>设置各组开始数目x_{i}</li><li>设置第k组一个生长期后进入k+1组的比例g_{k}</li><li>考虑有砍伐和无砍伐两种情形，写出模型</li><li>模型<ul><li>目标函数：砍的树木的价值</li><li>约束条件：</li><li>决策变量：y_{i}</li></ul></li></ul></li></ul></li></ul><h4 id="作业里面："><a href="#作业里面：" class="headerlink" title="作业里面："></a>作业里面：</h4><ul><li><input checked="" disabled="" type="checkbox"> <h5 id="游船上传染病预测"><a href="#游船上传染病预测" class="headerlink" title="游船上传染病预测"></a>游船上传染病预测</h5><ul><li>大题</li></ul></li><li><input checked="" disabled="" type="checkbox"> <h5 id="战机，途中遇到雷暴，指定规避路线"><a href="#战机，途中遇到雷暴，指定规避路线" class="headerlink" title="战机，途中遇到雷暴，指定规避路线"></a>战机，途中遇到雷暴，指定规避路线</h5><ul><li>大题</li></ul></li><li><input checked="" disabled="" type="checkbox"> <h5 id="基本高数要会："><a href="#基本高数要会：" class="headerlink" title="基本高数要会："></a>基本高数要会：</h5><ul><li>微分方程求解，二重积分计算</li></ul></li></ul><h4 id="题型"><a href="#题型" class="headerlink" title="题型"></a>题型</h4><ul><li><p>简答题 6分x5个</p></li><li><p>模型建立题目，一共五道大题 大题15-20分</p></li></ul><p>考试占比50%</p><p>小作业大作业人均90+</p>]]></content>
    
    
    <categories>
      
      <category>我的学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我的学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jarvis&#39;s self-introduction video</title>
    <link href="/2020/04/16/hexo%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5B%E7%AB%99%E8%A7%86%E9%A2%91/"/>
    <url>/2020/04/16/hexo%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5B%E7%AB%99%E8%A7%86%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<h2 id="Jarvis’s-self-introduction-video"><a href="#Jarvis’s-self-introduction-video" class="headerlink" title="Jarvis’s self-introduction video"></a>Jarvis’s self-introduction video</h2><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><iframe style="width: 100%; height: 500px; max-width: 100%；align:center; padding:20px 0;"        src="//player.bilibili.com/player.html?aid=501303272&bvid=BV1iN411d7wJ&cid=286925534&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    
    <categories>
      
      <category>个人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的leetcode之行</title>
    <link href="/2020/04/16/%E6%88%91%E7%9A%84leetcode%E4%B9%8B%E8%A1%8C/"/>
    <url>/2020/04/16/%E6%88%91%E7%9A%84leetcode%E4%B9%8B%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="我的leetcode之行"><a href="#我的leetcode之行" class="headerlink" title="我的leetcode之行"></a>我的leetcode之行</h2><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h3 id="8-字符串转整数"><a href="#8-字符串转整数" class="headerlink" title="8_字符串转整数"></a>8_字符串转整数</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = =utf-8 -*-</span><span class="hljs-comment"># @Time : 2020/4/7 11:14</span><span class="hljs-comment"># @Author : 宋子龙</span><span class="hljs-comment"># @File : 8_字符串转整数.py</span><span class="hljs-comment"># @Software : PyCharm</span><span class="hljs-comment"># 自动机思想</span>INT_MAX = <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span>INT_MIN = - <span class="hljs-number">2</span> ** <span class="hljs-number">31</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Aut0m0t0n</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span>        self.state = <span class="hljs-string">'start'</span>     <span class="hljs-comment"># 自动机状态参数</span>        self.sign = <span class="hljs-number">1</span>           <span class="hljs-comment"># 自动机有无符号参数</span>        self.ans = <span class="hljs-number">0</span>        self.table = &#123;            <span class="hljs-string">'start'</span>: [<span class="hljs-string">'start'</span>,<span class="hljs-string">'signed'</span>,<span class="hljs-string">'in_number'</span>,<span class="hljs-string">'end'</span>],            <span class="hljs-string">'signed'</span>: [<span class="hljs-string">'end'</span>,<span class="hljs-string">'end'</span>,<span class="hljs-string">'in_number'</span>,<span class="hljs-string">'end'</span>],            <span class="hljs-string">'in_number'</span>: [<span class="hljs-string">'end'</span>,<span class="hljs-string">'end'</span>,<span class="hljs-string">'in_number'</span>,<span class="hljs-string">'end'</span>],            <span class="hljs-string">'end'</span>: [<span class="hljs-string">'end'</span>,<span class="hljs-string">'end'</span>,<span class="hljs-string">'end'</span>,<span class="hljs-string">'end'</span>]        &#125;                         <span class="hljs-comment"># 自动机转移表</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_col</span><span class="hljs-params">(self, c)</span>:</span>           <span class="hljs-comment"># 判断字符类型</span>        <span class="hljs-keyword">if</span> c.isspace():            <span class="hljs-comment"># 空格返回0</span>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>        <span class="hljs-keyword">if</span> c == <span class="hljs-string">'+'</span> <span class="hljs-keyword">or</span> c == <span class="hljs-string">'-'</span>:     <span class="hljs-comment"># 正负号返回1</span>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>        <span class="hljs-keyword">if</span> c.isdigit():             <span class="hljs-comment"># 数字返回2</span>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>        <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>                    <span class="hljs-comment"># 其他返回3</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, c)</span>:</span>                  <span class="hljs-comment"># 自动机转移函数</span>        self.state = self.table[self.state][self.get_col(c)]        <span class="hljs-comment"># 自动机转移</span>        <span class="hljs-keyword">if</span> self.state == <span class="hljs-string">'in_number'</span>:            self.ans = self.ans * <span class="hljs-number">10</span> + int(c)            self.ans = min(self.ans, INT_MAX) <span class="hljs-keyword">if</span> self.sign == <span class="hljs-number">1</span> \                <span class="hljs-keyword">else</span> min(self.ans, -INT_MIN)        <span class="hljs-keyword">elif</span> self.state == <span class="hljs-string">'signed'</span>:            self.sign = <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> c == <span class="hljs-string">'+'</span> \                <span class="hljs-keyword">else</span> <span class="hljs-number">-1</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">myAtoi</span><span class="hljs-params">(self, str: str)</span> -&gt; int:</span>        automaton = Aut0m0t0n()        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> str:            automaton.get(c)        <span class="hljs-keyword">return</span> automaton.sign * automaton.anssolution = Solution()print(solution.myAtoi(<span class="hljs-string">'-1'</span>))</code></pre></div><h3 id="13-机器人运动范围"><a href="#13-机器人运动范围" class="headerlink" title="13_机器人运动范围"></a>13_机器人运动范围</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = =utf-8 -*-</span><span class="hljs-comment"># @Time : 2020/4/8 1:23</span><span class="hljs-comment"># @Author : 宋子龙</span><span class="hljs-comment"># @File : 13_机器人运动范围.py</span><span class="hljs-comment"># @Software : PyCharm</span><span class="hljs-comment"># 使用set和Queue进行广义搜索</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span>    <span class="hljs-comment"># def movingCount(self, m: int, n: int, k: int) -&gt; int:</span>    <span class="hljs-comment">#     s = 0</span>    <span class="hljs-comment">#     i = 0</span>    <span class="hljs-comment">#     while(i &lt; m):</span>    <span class="hljs-comment">#         j = 0</span>    <span class="hljs-comment">#         while(j &lt; n):</span>    <span class="hljs-comment">#             if self.plus(i) + self.plus(j) &lt;= k:</span>    <span class="hljs-comment">#                 s += 1</span>    <span class="hljs-comment">#             j += 1</span>    <span class="hljs-comment">#         i += 1</span>    <span class="hljs-comment">#     print(s)</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">movingCount</span><span class="hljs-params">(self, m: int, n: int, k: int)</span> -&gt; int:</span>        <span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue        q = Queue()        q.put((<span class="hljs-number">0</span>, <span class="hljs-number">0</span>))        s = set()        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> q.empty():            x, y = q.get()            <span class="hljs-keyword">if</span> (x, y) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> s <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> &lt;= x &lt; m <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> &lt;= y &lt; n <span class="hljs-keyword">and</span> self.digitsum(x) + self.digitsum(y) &lt;= k:                s.add((x, y))                <span class="hljs-keyword">for</span> nx, ny <span class="hljs-keyword">in</span> [(x + <span class="hljs-number">1</span>, y), (x, y + <span class="hljs-number">1</span>)]:                    q.put((nx, ny))        <span class="hljs-keyword">return</span> len(s)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">digitsum</span><span class="hljs-params">(self,x: int)</span>:</span>        p = <span class="hljs-number">0</span>        <span class="hljs-comment"># while x &gt;= 10:</span>        <span class="hljs-comment">#     p += x % 10</span>        <span class="hljs-comment">#     x = x / 10</span>        <span class="hljs-comment"># p += x</span>        <span class="hljs-keyword">while</span> x:            p += x % <span class="hljs-number">10</span>            x //= <span class="hljs-number">10</span>        <span class="hljs-keyword">return</span> psolution = Solution()solution.movingCount(<span class="hljs-number">16</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>)</code></pre></div><h3 id="22-括号生成"><a href="#22-括号生成" class="headerlink" title="22_括号生成"></a>22_括号生成</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = =utf-8 -*-</span><span class="hljs-comment"># @Time : 2020/4/9 11:29</span><span class="hljs-comment"># @Author : 宋子龙</span><span class="hljs-comment"># @File : 22_括号生成.py</span><span class="hljs-comment"># @Software : PyCharm</span><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> List<span class="hljs-comment"># left_right     这个变量代表左括号减去右括号，这个值必须一直&gt;=0，最后一定要=0</span><span class="hljs-comment"># 我的错解</span><span class="hljs-comment"># class Solution:</span><span class="hljs-comment">#</span><span class="hljs-comment">#     def generateParenthesis(self, n: int, left_right, stack: list) -&gt; List[str]:</span><span class="hljs-comment">#         if left_right &lt; 0 or len(stack)&gt;2*n:</span><span class="hljs-comment">#             return stack</span><span class="hljs-comment">#         elif len(stack) == 2*n and left_right == 0:</span><span class="hljs-comment">#             return stack</span><span class="hljs-comment">#         else:</span><span class="hljs-comment">#             self.app_left(stack, left_right)</span><span class="hljs-comment">#             self.generateParenthesis(n, left_right, stack)</span><span class="hljs-comment">#             stack.pop()</span><span class="hljs-comment">#             self.app_right(stack, left_right)</span><span class="hljs-comment">#             self.generateParenthesis(n, left_right, stack)</span><span class="hljs-comment">#             stack.pop()</span><span class="hljs-comment">#</span><span class="hljs-comment">#     def app_left(self, stack: list, left_right):</span><span class="hljs-comment">#         stack.append('(')</span><span class="hljs-comment">#         left_right += 1</span><span class="hljs-comment">#</span><span class="hljs-comment">#     def app_right(self, stack: list, left_right):</span><span class="hljs-comment">#         stack.append(')')</span><span class="hljs-comment">#         left_right -= 1</span><span class="hljs-comment">#</span><span class="hljs-comment"># solution = Solution()</span><span class="hljs-comment"># print(solution.generateParenthesis(8, 1, ["("]))</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generateParenthesis</span><span class="hljs-params">(self, n: int)</span> -&gt; List[str]:</span>        ans = []        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(S, left, right)</span>:</span>            <span class="hljs-keyword">if</span> len(S) == <span class="hljs-number">2</span> * n:                ans.append(<span class="hljs-string">''</span>.join(S))                <span class="hljs-keyword">return</span>            <span class="hljs-keyword">if</span> left &lt; n:                S.append(<span class="hljs-string">'('</span>)                backtrack(S, left+<span class="hljs-number">1</span>, right)                S.pop()            <span class="hljs-keyword">if</span> right &lt; left:                S.append(<span class="hljs-string">')'</span>)                backtrack(S, left, right+<span class="hljs-number">1</span>)                S.pop()        backtrack([], <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> anssolution = Solution()print(solution.generateParenthesis(<span class="hljs-number">4</span>))<span class="hljs-comment"># 另解</span><span class="hljs-string">'''class Solution:    @lru_cache(None)    def generateParenthesis(self, n: int) -&gt; List[str]:        if n == 0:            return ['']        ans = []        for c in range(n):            for left in self.generateParenthesis(c):                for right in self.generateParenthesis(n-1-c):                    ans.append('(&#123;&#125;)&#123;&#125;'.format(left, right))        return ans'''</span></code></pre></div><h3 id="42-接雨水"><a href="#42-接雨水" class="headerlink" title="42_接雨水"></a>42_接雨水</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = =utf-8 -*-</span><span class="hljs-comment"># @Time : 2020/4/10 16:26</span><span class="hljs-comment"># @Author : 宋子龙</span><span class="hljs-comment"># @File : 42_接雨水.py</span><span class="hljs-comment"># @Software : PyCharm</span><span class="hljs-comment"># 给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</span><span class="hljs-comment">#</span><span class="hljs-comment"># 上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 感谢 Marcos 贡献此图。</span><span class="hljs-comment">#</span><span class="hljs-comment"># 示例:</span><span class="hljs-comment">#</span><span class="hljs-comment"># 输入: [0,1,0,2,1,0,1,3,2,1,2,1]</span><span class="hljs-comment"># 输出: 6</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">trap</span><span class="hljs-params">(self, height)</span> -&gt; int:</span>        ans = <span class="hljs-number">0</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">count1</span><span class="hljs-params">(n)</span>:</span>            answer = <span class="hljs-number">0</span>            flag = <span class="hljs-number">1</span>            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(len(height)):                <span class="hljs-keyword">if</span> height[x] &gt;= n:                    <span class="hljs-keyword">if</span> flag &gt; <span class="hljs-number">1</span>:                        answer += x - up - <span class="hljs-number">1</span>                    flag += <span class="hljs-number">1</span>                    up = x            <span class="hljs-comment"># if len(l) == 1:</span>            <span class="hljs-comment">#     return 0</span>            <span class="hljs-comment"># for x in range(len(l)-1):</span>            <span class="hljs-comment">#     answer += (l[x+1] - l[x] - 1)</span>            print(answer)            <span class="hljs-keyword">return</span> answer        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> len(height):            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>        i = max(height)        <span class="hljs-keyword">while</span> i &gt;= <span class="hljs-number">1</span>:            ans += count1(i)            i -= <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> ans<span class="hljs-comment"># class Solution:</span><span class="hljs-comment">#     def trap(self, height) -&gt; int:</span><span class="hljs-comment">#         length = len(height)</span><span class="hljs-comment">#         if length &lt; 3: return 0</span><span class="hljs-comment">#         res, idx = 0, 0</span><span class="hljs-comment">#         stack = []</span><span class="hljs-comment">#         while idx &lt; length:</span><span class="hljs-comment">#             while len(stack) &gt; 0 and height[idx] &gt; height[stack[-1]]:</span><span class="hljs-comment">#                 top = stack.pop()  # index of the last element in the stack</span><span class="hljs-comment">#                 if len(stack) == 0:</span><span class="hljs-comment">#                     break</span><span class="hljs-comment">#                 h = min(height[stack[-1]], height[idx]) - height[top]</span><span class="hljs-comment">#                 dist = idx - stack[-1] - 1</span><span class="hljs-comment">#                 res += (dist * h)</span><span class="hljs-comment">#             stack.append(idx)</span><span class="hljs-comment">#             idx += 1</span><span class="hljs-comment">#         return res</span><span class="hljs-comment"># 174801674</span><span class="hljs-comment"># class Solution:</span><span class="hljs-comment">#     def trap(self, height: List[int]) -&gt; int:</span><span class="hljs-comment">#         n=len(height)</span><span class="hljs-comment">#         left,right=0,n-1</span><span class="hljs-comment">#         SUM,tmp,high=0,0,1</span><span class="hljs-comment">#         while(left&lt;=right):</span><span class="hljs-comment">#             while(left&lt;=right and height[left]&lt;high):</span><span class="hljs-comment">#                 SUM+=height[left]</span><span class="hljs-comment">#                 left+=1</span><span class="hljs-comment">#             while(right&gt;=left and height[right]&lt;high):</span><span class="hljs-comment">#                 SUM+=height[right]</span><span class="hljs-comment">#                 right-=1</span><span class="hljs-comment">#             high+=1</span><span class="hljs-comment">#             tmp+=right-left+1</span><span class="hljs-comment">#         return tmp-SUM</span>solution = Solution()print(solution.trap([自己加入测试用例]))</code></pre></div><h3 id="151-翻转字符串中的单词"><a href="#151-翻转字符串中的单词" class="headerlink" title="151_翻转字符串中的单词"></a>151_翻转字符串中的单词</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = =utf-8 -*-</span><span class="hljs-comment"># @Time : 2020/4/10 12:19</span><span class="hljs-comment"># @Author : 宋子龙</span><span class="hljs-comment"># @File : 151_翻转字符串中的单词.py</span><span class="hljs-comment"># @Software : PyCharm</span><span class="hljs-string">'''给定一个字符串，逐个翻转字符串中的每个单词。示例 1：输入: "the sky is blue"输出: "blue is sky the"示例 2：输入: "  hello world!  "输出: "world! hello"解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。示例 3：输入: "a good   example"输出: "example good a"解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。说明：无空格字符构成一个单词。输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。'''</span><span class="hljs-comment"># class Solution:</span><span class="hljs-comment">#     def reverseWords(self, s: str) -&gt; str:</span><span class="hljs-comment">#         i = -1</span><span class="hljs-comment">#         rword = []</span><span class="hljs-comment">#         nword = []</span><span class="hljs-comment">#         while i &gt;= -len(s):</span><span class="hljs-comment">#             if s[i] == ' ':</span><span class="hljs-comment">#                 rword.append(''.join(nword))</span><span class="hljs-comment">#                 nword = []</span><span class="hljs-comment">#             else:</span><span class="hljs-comment">#                 nword.append(s[i])</span><span class="hljs-comment">#             i -= 1</span><span class="hljs-comment">#         return rword</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverseWords</span><span class="hljs-params">(self, s: str)</span> -&gt; str:</span>        wordlist = s.split(sep=<span class="hljs-literal">None</span>, maxsplit=<span class="hljs-number">-1</span>)        <span class="hljs-comment"># print(wordlist)</span>        rewordlist = reversed(wordlist)        <span class="hljs-comment"># print(rewordlist)</span>        ans = <span class="hljs-string">' '</span>.join(rewordlist)        <span class="hljs-keyword">return</span> anssolution = Solution()print(solution.reverseWords(<span class="hljs-string">'hello world'</span>))</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于python3的opencv图像处理教程</title>
    <link href="/2020/04/15/%E5%9F%BA%E4%BA%8Epython3%E7%9A%84opencv%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E6%95%99%E7%A8%8B/"/>
    <url>/2020/04/15/%E5%9F%BA%E4%BA%8Epython3%E7%9A%84opencv%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="基于python3的opencv图像处理教程"><a href="#基于python3的opencv图像处理教程" class="headerlink" title="基于python3的opencv图像处理教程"></a>基于python3的opencv图像处理教程</h2><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h2 id="加载和显示"><a href="#加载和显示" class="headerlink" title="加载和显示"></a>加载和显示</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = =utf-8 -*-</span><span class="hljs-comment"># @Time : 2020/4/15 0:44</span><span class="hljs-comment"># @Author : 宋子龙</span><span class="hljs-comment"># @File : tutorial_1.py</span><span class="hljs-comment"># @Software : PyCharm</span><span class="hljs-keyword">import</span> cv2 <span class="hljs-keyword">as</span> cv<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">video_demo</span><span class="hljs-params">()</span>:</span>    capture = cv.VideoCapture(<span class="hljs-number">0</span>)    <span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):        ret, frame = capture.read()  <span class="hljs-comment"># 捕捉摄像头</span>        frame = cv.flip(frame, <span class="hljs-number">1</span>)    <span class="hljs-comment"># 不镜像</span>        cv.imshow(<span class="hljs-string">"video"</span>, frame)        c = cv.waitKey(<span class="hljs-number">50</span>)           <span class="hljs-comment">#</span>        <span class="hljs-keyword">if</span> c == <span class="hljs-number">27</span>:            <span class="hljs-keyword">break</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_image_info</span><span class="hljs-params">(image)</span>:</span>    print(type(image))<span class="hljs-comment"># 图像类型</span>    print(image.shape) <span class="hljs-comment"># 形状</span>    print(image.size)<span class="hljs-comment"># 尺寸</span>    print(image.dtype)<span class="hljs-comment"># 每个通道字节</span>    pixel_data = np.array(image) <span class="hljs-comment">#获取像素</span>    print(pixel_data)   <span class="hljs-comment"># 像素数据</span>src = cv.imread(<span class="hljs-string">"F:\Document\Picture/bizhi.jpg"</span>)get_image_info(src)<span class="hljs-string">'''输出E:\Project\PythonProjects\venv\Scripts\python.exe E:/Project/PythonProjects/opencv_tutorial/tutorial_1.py&lt;class 'numpy.ndarray'&gt;   读出类型是一个n维的数组(3744, 5616, 3)     高 宽 通道63078912            三者乘积uint8               每个通道占8个字节 Hi, Python!'''</span><span class="hljs-comment"># cv.imwrite("保存的目录", src)  # 保存图像</span>cv.namedWindow(<span class="hljs-string">"input image"</span>, cv.WINDOW_AUTOSIZE)<span class="hljs-comment"># 建立一个窗口</span>cv.imshow(<span class="hljs-string">"input image"</span>, src)   <span class="hljs-comment"># 展示图像</span>video_demo()                                          <span class="hljs-comment"># 播放视频</span>cv.waitKey(<span class="hljs-number">0</span>)                                          <span class="hljs-comment">#</span>cv.destroyAllWindows()                                  <span class="hljs-comment"># 关闭所有窗口</span>print(<span class="hljs-string">"Hi, Python!"</span>)<span class="hljs-string">'''while(1)&#123; if(waitKey(100)==27)break; &#125;在这个程序中,我们告诉OpenCv等待用户触发事件,等待时间为100ms，如果在这个时间段内, 用户按下ESC(ASCII码为27),则跳出循环,否则,则跳出循环while(1)&#123;if(waitkey(1000)==ord('q'))break;&#125;我们告诉OpenCv等待用户触发事件,等待时间为1000ms，如果在这个时间段内, 用户按下'q',则跳出循环,否则,则跳出循环cv.waitKey(delay) : 可以用 cv.waitKey(delay) 函数延迟窗口显示时间。其中参数dealy表示要延迟的毫秒数。由于操作系统是多线程执行，所以严格来说dealy表示最少延迟多少毫秒。delay 默认值为 0，当 dealy &lt;=0 时，表示永久延迟，直到键盘按下任意键。该函数会返回按键的  ASCII 值，如果在dealy值期间一直没有按，则返回 -1。&amp; 0xff ：在某些系统中，返回的键盘值可能不是ASCII编码的，所以通过与运算只取字符最后一个字节'''</span></code></pre></div><h2 id="numpy数组操作"><a href="#numpy数组操作" class="headerlink" title="numpy数组操作"></a>numpy数组操作</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2 <span class="hljs-keyword">as</span> cv<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">access_pixel</span><span class="hljs-params">(image)</span>:</span>    print(image.shape)    height = image.shape[<span class="hljs-number">0</span>]    width = image.shape[<span class="hljs-number">1</span>]    channels = image.shape[<span class="hljs-number">2</span>]    print(<span class="hljs-string">"width: %s, height: %s, channels: %s"</span>%(height, width, channels))    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> range(height):        <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> range(width):            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> range(channels):                pv = image[row, col, c]                image[row, col, c] = <span class="hljs-number">255</span> - pv    cv.imshow(<span class="hljs-string">"pixel_demo"</span>, image)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inverse</span><span class="hljs-params">(image)</span>:</span>    dst = cv.bitwise_not(image)    cv.imshow(<span class="hljs-string">"inverse demo"</span>,dst)<span class="hljs-comment"># 使用zeros()和ones()来初始化一个图像</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">creat_image</span><span class="hljs-params">()</span>:</span>    <span class="hljs-string">'''    # 多通道    img = np.zeros([400, 400, 3], np.uint8)             #np.uint8 指的是无符号整数（0 to 255），具体可以去网站https://www.runoob.com/numpy/numpy-dtype.html查看    img[: , : , 0] = np.ones([400, 400]) * 255         #只对blue通道做修改，改为255    cv.imshow("newimage", img)    # 单通道  黑白灰    img = np.zeros([400, 400, 1], np.uint8)    img[: , : , 0] = np.ones([400, 400]) * 127    cv.imshow("newimage", img)    '''</span>    m1 = np.ones([<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], np.uint8)    m1.fill(<span class="hljs-number">122.388</span>)    print(m1)    m2 = m1.reshape([<span class="hljs-number">1</span>,<span class="hljs-number">9</span>])    print(m2)src = cv.imread(<span class="hljs-string">"E:/Project/PythonProjects/test/adward.jpg"</span>)<span class="hljs-comment"># blue green red  三通道</span>cv.namedWindow(<span class="hljs-string">"input image"</span>, cv.WINDOW_AUTOSIZE)cv.imshow(<span class="hljs-string">"input image"</span>, src)t1 = cv.getTickCount()  <span class="hljs-comment">#读取当前电脑时间(s)，由此判断程序运行时间</span>creat_image()<span class="hljs-comment"># access_pixel(src)         #call 属性读取函数</span>inverse(src)                <span class="hljs-comment">#自带的像素取反API，因为是c语言底层，所以很快，可以提高效率</span>t2 = cv.getTickCount()time = (t2-t1)/cv.getTickFrequency()print(<span class="hljs-string">"time: %s ms"</span>%(time * <span class="hljs-number">1000</span>))cv.waitKey(<span class="hljs-number">0</span>)cv.destroyAllWindows()</code></pre></div><h2 id="色彩空间"><a href="#色彩空间" class="headerlink" title="色彩空间"></a>色彩空间</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = =utf-8 -*-</span><span class="hljs-comment"># @Time : 2020/4/18 0:05</span><span class="hljs-comment"># @Author : 宋子龙</span><span class="hljs-comment"># @File : tutorial_3.py</span><span class="hljs-comment"># @Software : PyCharm</span><span class="hljs-keyword">import</span> cv2 <span class="hljs-keyword">as</span> cv<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">extrace_object</span><span class="hljs-params">()</span>:</span>    capture = cv.VideoCapture(<span class="hljs-string">"F:\Document\Videos\英雄时刻.mp4"</span>)    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        ret, frame = capture.read()   <span class="hljs-comment"># 两个参数分别表示： 有没有读到文件， 一帧图像</span>        <span class="hljs-keyword">if</span> ret == <span class="hljs-literal">False</span>:            <span class="hljs-keyword">break</span>        hsv = cv.cvtColor(frame, cv.COLOR_BGR2HSV)        lower_hsv = np.array([<span class="hljs-number">32</span>, <span class="hljs-number">43</span>, <span class="hljs-number">46</span>])        upper_hsv = np.array([<span class="hljs-number">43</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>])        mask = cv.inRange(hsv, lowerb=lower_hsv, upperb=upper_hsv)        cv.imshow(<span class="hljs-string">"video"</span>, frame)        cv.imshow(<span class="hljs-string">"mask"</span>, mask)        c = cv.waitKey(<span class="hljs-number">40</span>)        <span class="hljs-keyword">if</span> c == <span class="hljs-number">27</span>:            <span class="hljs-keyword">break</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">color_space_demo</span><span class="hljs-params">(image)</span>:</span>  <span class="hljs-comment"># 几种色彩空间转化</span>    gray = cv.cvtColor(image, cv.COLOR_BGR2BGRA)    cv.imshow(<span class="hljs-string">"gray"</span>, gray)    hsv = cv.cvtColor(image, cv.COLOR_BGR2HSV)    cv.imshow(<span class="hljs-string">"hsv"</span>, hsv)    yuv = cv.cvtColor(image, cv.COLOR_BGR2YUV)    cv.imshow(<span class="hljs-string">"yuv"</span>, yuv)print(<span class="hljs-string">"----------Hi, Python!----------"</span>)src = cv.imread(<span class="hljs-string">"E:/Project/PythonProjects/test/adward.jpg"</span>)cv.namedWindow(<span class="hljs-string">"input image"</span>, cv.WINDOW_AUTOSIZE)<span class="hljs-comment"># 建立一个窗口</span><span class="hljs-comment"># cv.imshow("input image", src)   # 展示图像</span><span class="hljs-comment"># color_space_demo(src)</span>b, g ,r = cv.split(src)   <span class="hljs-comment"># 通道分离</span><span class="hljs-comment"># cv.imshow("blue", b)</span><span class="hljs-comment"># cv.imshow("green", g)</span><span class="hljs-comment"># cv.imshow("red", r)</span><span class="hljs-comment"># src[:, :, 0] = 0</span><span class="hljs-comment"># cv.imshow("input_no_blue image", src)</span><span class="hljs-comment"># src = cv.merge([b, g ,r])</span><span class="hljs-comment"># cv.imshow("input image", src)</span>extrace_object()cv.waitKey(<span class="hljs-number">0</span>)                                          <span class="hljs-comment">#</span>cv.destroyAllWindows()                                  <span class="hljs-comment"># 关闭所有窗口</span></code></pre></div><h2 id="像素运算"><a href="#像素运算" class="headerlink" title="像素运算"></a>像素运算</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = =utf-8 -*-</span><span class="hljs-comment"># @Time : 2020/4/19 0:07</span><span class="hljs-comment"># @Author : 宋子龙</span><span class="hljs-comment"># @File : tutorial_4.py</span><span class="hljs-comment"># @Software : PyCharm</span><span class="hljs-keyword">import</span> cv2 <span class="hljs-keyword">as</span> cv<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-comment"># 加减乘除</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_demo</span><span class="hljs-params">(m1, m2)</span>:</span>    dst = cv.add(m1, m2)    cv.imshow(<span class="hljs-string">"add_demo"</span>, dst)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">subtract_demo</span><span class="hljs-params">(m1, m2)</span>:</span>    dst = cv.subtract(m1, m2)    cv.imshow(<span class="hljs-string">"subtrract_demo"</span>, dst)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">divide_demo</span><span class="hljs-params">(m1, m2)</span>:</span>    dst = cv.divide(m1, m2)    cv.imshow(<span class="hljs-string">"divide_demo"</span>, dst)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">multiply_demo</span><span class="hljs-params">(m1, m2)</span>:</span>    dst = cv.multiply(m1, m2)    cv.imshow(<span class="hljs-string">"multiply_demo"</span>, dst)<span class="hljs-comment"># 逻辑运算</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logic_demo</span><span class="hljs-params">(m1, m2)</span>:</span>    dst1 = cv.bitwise_and(m1, m2)    dst2 = cv.bitwise_or(m1, m2)    dst3 = cv.bitwise_not(m1)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">contrast_brightness_demo</span><span class="hljs-params">(image, c, b)</span>:</span>    h, w, ch = image.shape    blank = np.zeros([h, w ,ch], image.dtype)    dst = cv.addWeighted(image, c, blank, <span class="hljs-number">1</span>-c, b)    cv.imshow(<span class="hljs-string">"con-bri-demo"</span>, dst)<span class="hljs-comment"># 取均值 求方差  可以判断图像大致状态</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">others</span><span class="hljs-params">(m1, m2)</span>:</span>    <span class="hljs-comment"># M1 = cv.mean(m1)</span>    <span class="hljs-comment"># M2 = cv.mean(m2)</span>    <span class="hljs-comment"># print(M1)</span>    <span class="hljs-comment"># print(M2)</span>    M1, dev1 = cv.meanStdDev(m1)    M2, dev2 = cv.meanStdDev(m2)    print(M1)    print(M2)    print(dev1)    print(dev2)print(<span class="hljs-string">"----------Hi, Python!----------"</span>)src = cv.imread(<span class="hljs-string">"E:/Project/PythonProjects/test/adward.jpg"</span>)src1 = cv.imread(<span class="hljs-string">"E:/Project/PythonProjects/test/6456271b6a95eca99a64982ab1526224.jpg"</span>)src2 = cv.imread(<span class="hljs-string">"E:/Project/PythonProjects/test/u=1378320566,246412302&amp;fm=26&amp;gp=0.jpg"</span>)print(src1.shape)print(src2.shape)<span class="hljs-comment"># cv.namedWindow("input image1", cv.WINDOW_AUTOSIZE)</span><span class="hljs-comment"># cv.imshow("input image1", src1)</span><span class="hljs-comment"># cv.imshow("input image2", src2)</span><span class="hljs-comment"># add_demo(src1, src2)</span><span class="hljs-comment"># subtract_demo(src1, src2)</span><span class="hljs-comment"># divide_demo(src1, src2)</span><span class="hljs-comment"># multiply_demo(src1, src2)</span><span class="hljs-comment"># others(src1, src2)</span>cv.imshow(<span class="hljs-string">"ori-pic"</span>, src)contrast_brightness_demo(src, <span class="hljs-number">2</span>, <span class="hljs-number">10</span>)cv.waitKey(<span class="hljs-number">0</span>)cv.destroyAllWindows()</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python</title>
    <link href="/2020/03/20/Python/"/>
    <url>/2020/03/20/Python/</url>
    
    <content type="html"><![CDATA[<h2 id="ppppppppppppppppython"><a href="#ppppppppppppppppython" class="headerlink" title="ppppppppppppppppython"></a>ppppppppppppppppython</h2><a id="more"></a><hr><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><ol><li><p>关于输入</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>name=input(<span class="hljs-string">"please input your name:"</span>)please input your name:szl<span class="hljs-meta">&gt;&gt;&gt; </span>name<span class="hljs-string">'szl'</span><span class="hljs-meta">&gt;&gt;&gt; </span>print(name)szl&gt;&gt;&gt;</code></pre></div></blockquote></li><li><p>交互式命令行内输入多行输入</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>print(<span class="hljs-string">'''1<span class="hljs-meta">... </span>2<span class="hljs-meta">... </span>3'''</span>)<span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">3</span></code></pre></div></blockquote></li><li><p>r””或者r’’可以使其中字符默认不转义</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>print(<span class="hljs-string">"\\\t\\"</span>)\       \&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>print(<span class="hljs-string">r"\\\t\\"</span>)\\\t\\&gt;&gt;&gt;</code></pre></div></blockquote></li><li><p>and    or    not</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">3</span>&gt;<span class="hljs-number">2</span><span class="hljs-literal">True</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">not</span> <span class="hljs-number">3</span>&gt;<span class="hljs-number">2</span><span class="hljs-literal">False</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">3</span>&gt;<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-number">2</span>&gt;<span class="hljs-number">1</span><span class="hljs-literal">True</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">3</span>&gt;<span class="hljs-number">2</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span>&gt;<span class="hljs-number">2</span><span class="hljs-literal">True</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">not</span> <span class="hljs-number">3</span>&gt;<span class="hljs-number">2</span><span class="hljs-literal">False</span></code></pre></div></blockquote></li><li><p>缩进</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#当语句以：结束时，缩进的语句视为代码块</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> <span class="hljs-number">3</span>&gt;<span class="hljs-number">2</span>:<span class="hljs-meta">... </span>print(<span class="hljs-string">"right"</span>)  File <span class="hljs-string">"&lt;stdin&gt;"</span>, line <span class="hljs-number">2</span>    print(<span class="hljs-string">"right"</span>)    ^IndentationError: expected an indented block<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> <span class="hljs-number">3</span>&gt;<span class="hljs-number">2</span>:<span class="hljs-meta">... </span>    print(<span class="hljs-string">"right"</span>)...right</code></pre></div></blockquote></li></ol><ol start="6"><li><p>变量（python是一种动态语言）</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#变量名必须是大小英文、数字和_的组合，且不能以数字开头</span>a=<span class="hljs-number">1</span>t_700=<span class="hljs-number">2</span>Answer=<span class="hljs-number">3</span></code></pre></div></blockquote></li><li><p>变量在内存中的表示</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">'ABC'</span><span class="hljs-comment">#解释器做了两件事</span><span class="hljs-comment">#1、在内存中创建一个'ABC'的字符串</span><span class="hljs-comment">#2、在内存中创建了一个a的变量，并把它指向'ABC'</span><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">'abc'</span><span class="hljs-meta">&gt;&gt;&gt; </span>b=a<span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">'efg'</span><span class="hljs-meta">&gt;&gt;&gt; </span>b<span class="hljs-string">'abc'</span><span class="hljs-meta">&gt;&gt;&gt; </span>a<span class="hljs-string">'efg'</span>a=b<span class="hljs-comment">#赋值操作，实际上是把变量b指向变量a所指向的数据</span></code></pre></div></blockquote></li><li><p>常量</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#一般用全部大写的变量名表示</span></code></pre></div></blockquote></li><li><p>除法</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">10</span> / <span class="hljs-number">3</span><span class="hljs-number">3.3333333333333335</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">10</span> // <span class="hljs-number">3</span><span class="hljs-number">3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">10</span> % <span class="hljs-number">3</span><span class="hljs-number">1</span></code></pre></div></blockquote></li><li><p>字符编码</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#美国ASCII</span><span class="hljs-comment">#中国GB2312</span><span class="hljs-comment">#...</span><span class="hljs-comment">#统一Unicode</span><span class="hljs-comment">#可变长度   UTF-8</span></code></pre></div></blockquote></li><li><p>字符str表示</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>ord(<span class="hljs-string">'A'</span>)<span class="hljs-number">65</span><span class="hljs-meta">&gt;&gt;&gt; </span>ord(<span class="hljs-string">'中'</span>)<span class="hljs-number">20013</span><span class="hljs-meta">&gt;&gt;&gt; </span>chr(<span class="hljs-number">666</span>)<span class="hljs-string">'ʚ'</span><span class="hljs-meta">&gt;&gt;&gt; </span>chr(<span class="hljs-number">66</span>)<span class="hljs-string">'B'</span><span class="hljs-meta">&gt;&gt;&gt; </span>chr(<span class="hljs-number">25991</span>)<span class="hljs-string">'文'</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">'\u4e2d\u6587'</span><span class="hljs-string">'中文'</span><span class="hljs-comment">#0x开头代表十六进制，实际上就是一个整数；</span><span class="hljs-comment">#\x对应的是UTF-8编码的数据，通过转化规则可以转换为Unicode编码；</span><span class="hljs-comment">#\u则代表unicode编码，是一个字符；</span></code></pre></div></blockquote></li><li><p>bytes类型</p><blockquote>  <div class="hljs"><pre><code class="hljs python">x=<span class="hljs-string">b'ABC'</span><span class="hljs-comment">#用带b前缀的单引号或双引号表示</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">'ABC'</span>.encode(<span class="hljs-string">'ascii'</span>)<span class="hljs-string">b'ABC'</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">'中文'</span>.encode(<span class="hljs-string">'utf-8'</span>)<span class="hljs-string">b'\xe4\xb8\xad\xe6\x96\x87'</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">'中文'</span>.encode(<span class="hljs-string">'ascii'</span>)<span class="hljs-comment">#中文用ascii无法编码</span><span class="hljs-comment">#encode（）函数可以将str类型转化为bytes类型</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">b'ABC'</span>.decode(<span class="hljs-string">'ascii'</span>)<span class="hljs-string">'ABC'</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">b'\xe4\xb8\xad\xe6\x96\x87'</span>.decode(<span class="hljs-string">'utf-8'</span>)<span class="hljs-string">'中文'</span><span class="hljs-comment">#反之，有相应的decode（）方法</span></code></pre></div></blockquote></li><li><p>len（）方法计算字符串长度</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>len(<span class="hljs-string">b'ABC'</span>)<span class="hljs-number">3</span><span class="hljs-meta">&gt;&gt;&gt; </span>len(<span class="hljs-string">b'\xe4\xb8\xad\xe6\x96\x87'</span>)<span class="hljs-number">6</span><span class="hljs-meta">&gt;&gt;&gt; </span>len(<span class="hljs-string">'中文'</span>)<span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span>len(<span class="hljs-string">'中文'</span>.encode(<span class="hljs-string">'utf-8'</span>))<span class="hljs-number">6</span><span class="hljs-comment">#可见中文一般在utf-8编码中占用3个字节，英文字符占1个</span></code></pre></div></blockquote></li><li><p>源代码有中文</p><blockquote>  <div class="hljs"><pre><code class="hljs python">要加入以下注释<span class="hljs-comment">#！/usr/bin/env python3</span><span class="hljs-comment"># -*- coding: utf-8 -*-</span>第一行是为了告诉linux/os x系统，这是一个python可执行程序，windows会忽略第二行是为了告诉python解释器，按照utf<span class="hljs-number">-8</span>编码读取源代码写代码时需要保证文本编辑器是按照UTF<span class="hljs-number">-8</span>编码</code></pre></div></blockquote></li><li><p>格式化</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">'hello,%s'</span>%<span class="hljs-string">'world'</span><span class="hljs-string">'hello,world'</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">'hi,%s,you have $%d.'</span>%(<span class="hljs-string">"szl"</span>,<span class="hljs-number">100000000000000</span>)<span class="hljs-string">'hi,szl,you have $100000000000000.'</span><span class="hljs-comment">#仅有一个占位符%？时，可以不加括号</span><span class="hljs-meta">&gt;&gt;&gt; </span>print(<span class="hljs-string">'%2d-%02d'</span>%(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>)) <span class="hljs-number">3</span><span class="hljs-number">-01</span><span class="hljs-meta">&gt;&gt;&gt; </span>print(<span class="hljs-string">'%d-%02d'</span>%(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>))<span class="hljs-number">3</span><span class="hljs-number">-01</span><span class="hljs-meta">&gt;&gt;&gt; </span>print(<span class="hljs-string">'%.2f'</span>%<span class="hljs-number">3.1415926</span>)<span class="hljs-number">3.14</span><span class="hljs-comment">#用来改变数字格式</span></code></pre></div></blockquote></li><li><p>list</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#相当于数组</span><span class="hljs-meta">&gt;&gt;&gt; </span>classmates=[<span class="hljs-string">'szl'</span>,<span class="hljs-string">'hhy'</span>,<span class="hljs-string">'shb'</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>classmates[<span class="hljs-string">'szl'</span>, <span class="hljs-string">'hhy'</span>, <span class="hljs-string">'shb'</span>]<span class="hljs-comment">#len（）方法获得list的数量</span><span class="hljs-meta">&gt;&gt;&gt; </span>len(classmates)<span class="hljs-number">3</span><span class="hljs-comment">#用索引可以访问list中正或倒数位置的元素</span><span class="hljs-meta">&gt;&gt;&gt; </span>classmates[<span class="hljs-number">2</span>]<span class="hljs-string">'shb'</span><span class="hljs-meta">&gt;&gt;&gt; </span>classmates[<span class="hljs-number">-1</span>]<span class="hljs-string">'shb'</span><span class="hljs-comment">#可以追加list中的元素</span><span class="hljs-meta">&gt;&gt;&gt; </span>classmates.append(<span class="hljs-string">'sqh'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>classmates[<span class="hljs-string">'szl'</span>, <span class="hljs-string">'hhy'</span>, <span class="hljs-string">'shb'</span>, <span class="hljs-string">'sqh'</span>]<span class="hljs-comment">#可以在某位置插入元素</span><span class="hljs-meta">&gt;&gt;&gt; </span>classmates.insert(<span class="hljs-number">1</span>,<span class="hljs-string">'czy'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>classmates[<span class="hljs-string">'szl'</span>, <span class="hljs-string">'czy'</span>, <span class="hljs-string">'hhy'</span>, <span class="hljs-string">'shb'</span>, <span class="hljs-string">'sqh'</span>]<span class="hljs-comment">#可以删除末尾元素</span><span class="hljs-meta">&gt;&gt;&gt; </span>classmates.pop()<span class="hljs-string">'sqh'</span><span class="hljs-meta">&gt;&gt;&gt; </span>classmates[<span class="hljs-string">'szl'</span>, <span class="hljs-string">'czy'</span>, <span class="hljs-string">'hhy'</span>, <span class="hljs-string">'shb'</span>]<span class="hljs-comment">#删除指定位置元素，用pop（i）</span><span class="hljs-meta">&gt;&gt;&gt; </span>classmates.pop(<span class="hljs-number">-2</span>)<span class="hljs-string">'hhy'</span><span class="hljs-meta">&gt;&gt;&gt; </span>classmates[<span class="hljs-string">'szl'</span>, <span class="hljs-string">'czy'</span>, <span class="hljs-string">'shb'</span>]<span class="hljs-comment">#可以替换某一位置元素，直接赋值</span><span class="hljs-meta">&gt;&gt;&gt; </span>classmates[<span class="hljs-number">0</span>]=<span class="hljs-string">'hhy'</span><span class="hljs-meta">&gt;&gt;&gt; </span>classmates[<span class="hljs-string">'hhy'</span>, <span class="hljs-string">'czy'</span>, <span class="hljs-string">'shb'</span>]<span class="hljs-comment">#list中数据类型可以不同</span><span class="hljs-meta">&gt;&gt;&gt; </span>s=[<span class="hljs-number">1</span>,<span class="hljs-string">'szl'</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>s[<span class="hljs-number">1</span>, <span class="hljs-string">'szl'</span>]<span class="hljs-comment">#可以有二维list</span><span class="hljs-meta">&gt;&gt;&gt; </span>s=[<span class="hljs-number">1</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],<span class="hljs-number">2</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>s[<span class="hljs-number">1</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], <span class="hljs-number">2</span>]</code></pre></div></blockquote><p>tuple  初始化完成后不可修改</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#只可访问，不可修改</span><span class="hljs-meta">&gt;&gt;&gt; </span>t=(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>t(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<span class="hljs-comment">#定义只有一个元素的tuple，防止歧义</span><span class="hljs-meta">&gt;&gt;&gt; </span>t=(<span class="hljs-number">1</span>,)<span class="hljs-meta">&gt;&gt;&gt; </span>t(<span class="hljs-number">1</span>,)<span class="hljs-comment">#可以改变元素的tuple</span><span class="hljs-meta">&gt;&gt;&gt; </span>t=(<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<span class="hljs-number">4</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>t(<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">4</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>t[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">100</span><span class="hljs-meta">&gt;&gt;&gt; </span>t(<span class="hljs-number">1</span>, [<span class="hljs-number">100</span>, <span class="hljs-number">3</span>], <span class="hljs-number">4</span>)</code></pre></div></blockquote></li><li><p>条件判断if</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#判断为true，执行缩进的语句</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> <span class="hljs-number">1</span>&lt;<span class="hljs-number">2</span>:<span class="hljs-meta">... </span>    print(<span class="hljs-number">1</span>)<span class="hljs-meta">... </span>    print(<span class="hljs-number">2</span>)...<span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-comment">#可以使用else：</span><span class="hljs-comment">#可以使用elif：（相当于else if）</span><span class="hljs-comment">#可简写判断条件，x时非零数值、非空字符串、非空list等，判断为true</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> x:<span class="hljs-meta">... </span>    print(<span class="hljs-string">'x!=0'</span>)...x!=<span class="hljs-number">0</span></code></pre></div></blockquote></li><li><p>关于input</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#input（）读入的时str类型</span><span class="hljs-meta">&gt;&gt;&gt; </span>s=input(<span class="hljs-string">'birth='</span>)birth=<span class="hljs-number">100</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> s&gt;<span class="hljs-number">1</span>:<span class="hljs-meta">... </span>    print(<span class="hljs-number">1</span>)...Traceback (most recent call last):  File <span class="hljs-string">"&lt;stdin&gt;"</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;TypeError: <span class="hljs-string">'&gt;'</span> <span class="hljs-keyword">not</span> supported between instances of <span class="hljs-string">'str'</span> <span class="hljs-keyword">and</span> <span class="hljs-string">'int'</span><span class="hljs-comment">#此时需要强制转换类型</span><span class="hljs-meta">&gt;&gt;&gt; </span>birth=int(s)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> birth&gt;<span class="hljs-number">1</span>:<span class="hljs-meta">... </span>    print(<span class="hljs-number">1</span>)...<span class="hljs-number">1</span></code></pre></div></blockquote></li><li><p>循环for…in</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#依次迭代出list或者tuple中的元素</span><span class="hljs-meta">&gt;&gt;&gt; </span>names=[<span class="hljs-string">'szl'</span>,<span class="hljs-string">'hhy'</span>,<span class="hljs-string">'ssl'</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> names:<span class="hljs-meta">... </span>    print(name)...szlhhyssl<span class="hljs-comment">#计算1-100的和，利用range（）函数生成整数列</span><span class="hljs-meta">&gt;&gt;&gt; </span>sum=<span class="hljs-number">0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">101</span>):<span class="hljs-meta">... </span>     sum=sum+x...<span class="hljs-meta">&gt;&gt;&gt; </span>print(sum)<span class="hljs-number">5050</span><span class="hljs-comment">#测试</span><span class="hljs-meta">&gt;&gt;&gt; </span>l=[<span class="hljs-string">'szl'</span>,<span class="hljs-string">'hhy'</span>,<span class="hljs-string">'ssl'</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> l:<span class="hljs-meta">... </span>    print(<span class="hljs-string">'hello,%s.'</span>%x)...hello,szl.hello,hhy.hello,ssl.</code></pre></div></blockquote><p>循环while，和c一样</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#break和continue</span></code></pre></div></blockquote></li></ol><ol start="20"><li><p>字典dict</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#字典原理，查找速度快</span><span class="hljs-meta">&gt;&gt;&gt; </span>d=&#123;<span class="hljs-string">'szl'</span>:<span class="hljs-number">1</span>,<span class="hljs-string">'hhy'</span>:<span class="hljs-number">2</span>,<span class="hljs-string">'ssb'</span>:<span class="hljs-number">3</span>&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>d[<span class="hljs-string">'hhy'</span>]<span class="hljs-number">2</span><span class="hljs-comment">#可以通过key放入value</span><span class="hljs-meta">&gt;&gt;&gt; </span>d[<span class="hljs-string">'sqh'</span>]=<span class="hljs-number">4</span><span class="hljs-meta">&gt;&gt;&gt; </span>d[<span class="hljs-string">'sqh'</span>]<span class="hljs-number">4</span><span class="hljs-meta">&gt;&gt;&gt; </span>d&#123;<span class="hljs-string">'szl'</span>: <span class="hljs-number">1</span>, <span class="hljs-string">'hhy'</span>: <span class="hljs-number">2</span>, <span class="hljs-string">'ssb'</span>: <span class="hljs-number">3</span>, <span class="hljs-string">'sqh'</span>: <span class="hljs-number">4</span>&#125;<span class="hljs-comment">#可以通过in来查询key是否存在于dict中</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">'ss'</span><span class="hljs-keyword">in</span> d<span class="hljs-literal">False</span><span class="hljs-comment">#也可以通过get，指定不存在时返回的值</span><span class="hljs-meta">&gt;&gt;&gt; </span>d.get(<span class="hljs-string">'ss'</span>,<span class="hljs-string">'不存在'</span>)<span class="hljs-string">'不存在'</span><span class="hljs-meta">&gt;&gt;&gt; </span>d.get(<span class="hljs-string">'ss'</span>)<span class="hljs-comment">#返回了一个none，在交互环境中不显示</span><span class="hljs-meta">&gt;&gt;&gt; </span>d.get(<span class="hljs-string">'ssb'</span>)<span class="hljs-number">3</span><span class="hljs-comment">#pop（key）方法删除</span><span class="hljs-meta">&gt;&gt;&gt; </span>d&#123;<span class="hljs-string">'szl'</span>: <span class="hljs-number">1</span>, <span class="hljs-string">'hhy'</span>: <span class="hljs-number">2</span>, <span class="hljs-string">'ssb'</span>: <span class="hljs-number">3</span>, <span class="hljs-string">'sqh'</span>: <span class="hljs-number">4</span>&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>d.pop(<span class="hljs-string">'sqh'</span>)<span class="hljs-number">4</span><span class="hljs-meta">&gt;&gt;&gt; </span>d&#123;<span class="hljs-string">'szl'</span>: <span class="hljs-number">1</span>, <span class="hljs-string">'hhy'</span>: <span class="hljs-number">2</span>, <span class="hljs-string">'ssb'</span>: <span class="hljs-number">3</span>&#125;<span class="hljs-comment">#对key通过哈希算法确定value的储存位置，无序的</span></code></pre></div></blockquote><p>set 不存放value</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#创建set需要提供一个list作为输入集合</span><span class="hljs-meta">&gt;&gt;&gt; </span>s=set([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>s&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<span class="hljs-comment">#add（）方法可以添加，remove（）可以删除</span><span class="hljs-meta">&gt;&gt;&gt; </span>s.add(<span class="hljs-number">5</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>s&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>s.remove(<span class="hljs-number">5</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>s&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<span class="hljs-comment">#可以看成集合，可用交并运算</span><span class="hljs-meta">&gt;&gt;&gt; </span>t=set([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>s=set([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>s&amp;t&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>s|t&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;</code></pre></div></blockquote></li><li><p>不可变对象</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#list可变</span><span class="hljs-meta">&gt;&gt;&gt; </span>a=[<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>a.sort()<span class="hljs-meta">&gt;&gt;&gt; </span>a[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<span class="hljs-comment">#str不可变</span><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">'abc'</span><span class="hljs-meta">&gt;&gt;&gt; </span>a.replace(<span class="hljs-string">'a'</span>,<span class="hljs-string">'A'</span>)<span class="hljs-string">'Abc'</span><span class="hljs-comment">#上述情况是因为，系统创建了一个新的字符串对象，并将a指向它</span><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">'abc'</span><span class="hljs-meta">&gt;&gt;&gt; </span>b=a.replace(<span class="hljs-string">'a'</span>,<span class="hljs-string">'A'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>a<span class="hljs-string">'abc'</span><span class="hljs-meta">&gt;&gt;&gt; </span>b<span class="hljs-string">'Abc'</span><span class="hljs-comment">#所以，对于不变对象，调用自身的任意方法，不会改变自身，而是创建一个新的对象并返回</span></code></pre></div></blockquote></li><li><p>函数是最基本的一种代码抽象方式</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#python有许多内置函数，比如绝对值函数abs（）</span><span class="hljs-meta">&gt;&gt;&gt; </span>abs(<span class="hljs-number">-1999</span>)<span class="hljs-number">1999</span><span class="hljs-comment">#调用函数时如果传入的参数数量不对，会报TypeError的错误</span><span class="hljs-meta">&gt;&gt;&gt; </span>abs(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)Traceback (most recent call last):  File <span class="hljs-string">"&lt;stdin&gt;"</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;TypeError: abs() takes exactly one argument (<span class="hljs-number">2</span> given)<span class="hljs-comment">#参数类型错误也会报错</span><span class="hljs-meta">&gt;&gt;&gt; </span>abs(<span class="hljs-string">'a'</span>)Traceback (most recent call last):  File <span class="hljs-string">"&lt;stdin&gt;"</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;TypeError: bad operand type <span class="hljs-keyword">for</span> abs(): <span class="hljs-string">'str'</span><span class="hljs-comment">#python内置有数据类型转换函数</span><span class="hljs-meta">&gt;&gt;&gt; </span>int(<span class="hljs-string">'123'</span>)<span class="hljs-number">123</span><span class="hljs-meta">&gt;&gt;&gt; </span>int(<span class="hljs-number">1.2</span>)<span class="hljs-number">1</span><span class="hljs-meta">&gt;&gt;&gt; </span>int(<span class="hljs-number">1.6</span>)<span class="hljs-number">1</span><span class="hljs-meta">&gt;&gt;&gt; </span>str(<span class="hljs-number">100</span>)<span class="hljs-string">'100'</span><span class="hljs-meta">&gt;&gt;&gt; </span>bool(<span class="hljs-number">1</span>)<span class="hljs-literal">True</span><span class="hljs-meta">&gt;&gt;&gt; </span>bool(<span class="hljs-string">"1"</span>)<span class="hljs-literal">True</span><span class="hljs-comment">#可以给函数起别名</span><span class="hljs-meta">&gt;&gt;&gt; </span>a=abs<span class="hljs-meta">&gt;&gt;&gt; </span>a(<span class="hljs-number">-1</span>)<span class="hljs-number">1</span><span class="hljs-comment">#hex可以转换整数为十六进制字符串</span><span class="hljs-meta">&gt;&gt;&gt; </span>hex(int(<span class="hljs-number">2.1</span>))<span class="hljs-string">'0x2'</span></code></pre></div></blockquote><p>自定义函数</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#def 函数名（参数）：</span><span class="hljs-comment">#缩进块中编写函数主题</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_abs</span><span class="hljs-params">(x)</span>:</span><span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> x&gt;<span class="hljs-number">0</span>:<span class="hljs-meta">... </span>            <span class="hljs-keyword">return</span> x<span class="hljs-meta">... </span>    <span class="hljs-keyword">else</span>:<span class="hljs-meta">... </span>            <span class="hljs-keyword">return</span> -x...<span class="hljs-meta">&gt;&gt;&gt; </span>my_abs(<span class="hljs-number">-1</span>)<span class="hljs-number">1</span><span class="hljs-comment">#如果没有return，会返回none。return none可以简写为return</span><span class="hljs-comment">#将函数保存为abstest.py，可以在当前目录命令行调用</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> abstest <span class="hljs-keyword">import</span> my_abs<span class="hljs-meta">&gt;&gt;&gt; </span>my_abs(<span class="hljs-number">-9</span>)<span class="hljs-number">9</span><span class="hljs-comment">#定义空函数，可以用pass</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">nop</span><span class="hljs-params">()</span>:</span><span class="hljs-meta">... </span>    <span class="hljs-keyword">pass</span>...<span class="hljs-meta">&gt;&gt;&gt; </span>nop()<span class="hljs-comment">#pass还可以用于其他语句</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> <span class="hljs-number">2</span>&gt;<span class="hljs-number">1</span>:<span class="hljs-meta">... </span>    <span class="hljs-keyword">pass</span>...<span class="hljs-comment">#自定义的函数，如果参数数量不对，解释器可以检查</span><span class="hljs-meta">&gt;&gt;&gt; </span>my_abs(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)Traceback (most recent call last):  File <span class="hljs-string">"&lt;stdin&gt;"</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;TypeError: my_abs() takes <span class="hljs-number">1</span> positional argument but <span class="hljs-number">2</span> were given<span class="hljs-comment">#如果参数类型不对无法检查，内置函数也许可以检查</span><span class="hljs-meta">&gt;&gt;&gt; </span>my_abs(<span class="hljs-string">'a'</span>)Traceback (most recent call last):  File <span class="hljs-string">"&lt;stdin&gt;"</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;  File <span class="hljs-string">"E:\Project\PythonProjects\abstest.py"</span>, line <span class="hljs-number">2</span>, <span class="hljs-keyword">in</span> my_abs    <span class="hljs-keyword">if</span> x&gt;<span class="hljs-number">0</span>:TypeError: <span class="hljs-string">'&gt;'</span> <span class="hljs-keyword">not</span> supported between instances of <span class="hljs-string">'str'</span> <span class="hljs-keyword">and</span> <span class="hljs-string">'int'</span><span class="hljs-meta">&gt;&gt;&gt; </span>abs(<span class="hljs-string">'a'</span>)Traceback (most recent call last):  File <span class="hljs-string">"&lt;stdin&gt;"</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;TypeError: bad operand type <span class="hljs-keyword">for</span> abs(): <span class="hljs-string">'str'</span><span class="hljs-comment">#可以自行修改函数进行参数检查</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_abs</span><span class="hljs-params">(x)</span>:</span><span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> isinstance(x,(int,float)):<span class="hljs-meta">... </span>            <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">'bad operand type'</span>)<span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> x&gt;=<span class="hljs-number">0</span>:<span class="hljs-meta">... </span>            <span class="hljs-keyword">return</span> x<span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> x&lt;<span class="hljs-number">0</span>:<span class="hljs-meta">... </span>            <span class="hljs-keyword">return</span> -x...<span class="hljs-meta">&gt;&gt;&gt; </span>my_abs(<span class="hljs-string">'a'</span>)Traceback (most recent call last):  File <span class="hljs-string">"&lt;stdin&gt;"</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;  File <span class="hljs-string">"&lt;stdin&gt;"</span>, line <span class="hljs-number">3</span>, <span class="hljs-keyword">in</span> my_absTypeError: bad operand type<span class="hljs-comment">#函数返回多个值，但其实只返回了一个tuple</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">move</span><span class="hljs-params">(x,y,step,angle=<span class="hljs-number">0</span>)</span>:</span><span class="hljs-meta">... </span>    nx=x<span class="hljs-meta">... </span>    ny=y<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> nx,ny...<span class="hljs-meta">&gt;&gt;&gt; </span>x,y=move(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>x<span class="hljs-number">1</span><span class="hljs-meta">&gt;&gt;&gt; </span>y<span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span>a=move(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>a(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</code></pre></div></blockquote></li><li><p>函数参数</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#位置参数</span><span class="hljs-comment">#对于默认参数，应该将默认参数放在必选参数之后</span><span class="hljs-comment">#下述情况，应该这样传参调用</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">enroll</span><span class="hljs-params">(name,gender,age=<span class="hljs-number">6</span>,city=<span class="hljs-string">'beijing'</span>)</span>:</span><span class="hljs-meta">... </span>    print(name)<span class="hljs-meta">... </span>    print(gender)<span class="hljs-meta">... </span>    print(age)<span class="hljs-meta">... </span>    print(city)...<span class="hljs-meta">&gt;&gt;&gt; </span>enroll(<span class="hljs-string">'szl'</span>,<span class="hljs-number">6</span>,city=<span class="hljs-string">'xian'</span>)szl<span class="hljs-number">6</span><span class="hljs-number">6</span>xian<span class="hljs-comment">#默认参数的坑</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_end</span><span class="hljs-params">(l=[])</span>:</span><span class="hljs-meta">... </span>    l.append(<span class="hljs-string">'END'</span>)<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> l...<span class="hljs-meta">&gt;&gt;&gt; </span>add_end([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">'END'</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>add_end([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>])[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-string">'END'</span>]             <span class="hljs-comment">#正常调用没问题</span><span class="hljs-meta">&gt;&gt;&gt; </span>add_end()[<span class="hljs-string">'END'</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>add_end()[<span class="hljs-string">'END'</span>, <span class="hljs-string">'END'</span>]                <span class="hljs-comment">#因为l指向了默认的创建的list</span><span class="hljs-comment">#因此需要用none这个不变对象实现</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_end</span><span class="hljs-params">(l=None)</span>:</span><span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> l <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<span class="hljs-meta">... </span>            l=[]<span class="hljs-meta">... </span>    l.append(<span class="hljs-string">'END'</span>)<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> l...<span class="hljs-meta">&gt;&gt;&gt; </span>add_end()[<span class="hljs-string">'END'</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>add_end()[<span class="hljs-string">'END'</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>add_end()[<span class="hljs-string">'END'</span>]                     <span class="hljs-comment">#所以应该尽量把对象设计为不变对象</span></code></pre></div></blockquote><p>可变参数</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#首先可以使用list或者tuple传参</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calc</span><span class="hljs-params">(numbers)</span>:</span><span class="hljs-meta">... </span>    sum=<span class="hljs-number">0</span><span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> numbers:<span class="hljs-meta">... </span>            sum=sum+n*n<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> sum...<span class="hljs-meta">&gt;&gt;&gt; </span>calc([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<span class="hljs-number">14</span><span class="hljs-meta">&gt;&gt;&gt; </span>calc((<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>))<span class="hljs-number">62</span><span class="hljs-comment">#最好的解决办法</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calc</span><span class="hljs-params">(*numbers)</span>:</span><span class="hljs-meta">... </span>    sum=<span class="hljs-number">0</span><span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> numbers:<span class="hljs-meta">... </span>            sum=sum+n*n<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> sum...<span class="hljs-meta">&gt;&gt;&gt; </span>calc(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<span class="hljs-number">14</span><span class="hljs-meta">&gt;&gt;&gt; </span>calc(<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>)<span class="hljs-number">149</span><span class="hljs-meta">&gt;&gt;&gt; </span>calc()<span class="hljs-number">0</span><span class="hljs-comment">#这个函数也可以这样调用</span><span class="hljs-meta">&gt;&gt;&gt; </span>num=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>calc(*num)<span class="hljs-number">21</span><span class="hljs-comment">#可变参数相当于初始化一个list或者tuple</span></code></pre></div></blockquote><p>关键字参数</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#可以只传入必选参数</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">person</span><span class="hljs-params">(name,age,**kw)</span>:</span><span class="hljs-meta">... </span>    print(<span class="hljs-string">'name:'</span>,name,<span class="hljs-string">'age:'</span>,age,<span class="hljs-string">'other:'</span>,kw)...<span class="hljs-meta">&gt;&gt;&gt; </span>person(<span class="hljs-string">'szl'</span>,<span class="hljs-number">19</span>)name: szl age: <span class="hljs-number">19</span> other: &#123;&#125;<span class="hljs-comment">#可以传入任意多关键字参数</span><span class="hljs-meta">&gt;&gt;&gt; </span>person(<span class="hljs-string">'szl'</span>,<span class="hljs-number">19</span>,city=<span class="hljs-string">'zmd'</span>,hobby=<span class="hljs-string">'girls'</span>)name: szl age: <span class="hljs-number">19</span> other: &#123;<span class="hljs-string">'city'</span>: <span class="hljs-string">'zmd'</span>, <span class="hljs-string">'hobby'</span>: <span class="hljs-string">'girls'</span>&#125;<span class="hljs-comment">#也可以这样调用</span><span class="hljs-meta">&gt;&gt;&gt; </span>extra=&#123;<span class="hljs-string">'city'</span>:<span class="hljs-string">'zmd'</span>,<span class="hljs-string">'hobby'</span>:<span class="hljs-string">'girls'</span>&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>person(<span class="hljs-string">'szl'</span>,<span class="hljs-number">19</span>,**extra)name: szl age: <span class="hljs-number">19</span> other: &#123;<span class="hljs-string">'city'</span>: <span class="hljs-string">'zmd'</span>, <span class="hljs-string">'hobby'</span>: <span class="hljs-string">'girls'</span>&#125;<span class="hljs-comment">#关键字参数相当于初始化一个dict，**extra表示这个dict的所有参数传入到函数的**kw参数，kw获得一个dict的拷贝</span><span class="hljs-comment">#命名关键字参数，必须传入参数名</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">person</span><span class="hljs-params">(name,age,*,city,job)</span>:</span><span class="hljs-meta">... </span>    print(name,age,city,job)...<span class="hljs-meta">&gt;&gt;&gt; </span>person(<span class="hljs-string">'szl'</span>,<span class="hljs-number">19</span>,city=<span class="hljs-string">'zmd'</span>,job=<span class="hljs-string">'stydent'</span>)szl <span class="hljs-number">19</span> zmd stydent<span class="hljs-comment">#不传入参数名会报错</span><span class="hljs-meta">&gt;&gt;&gt; </span>person(<span class="hljs-string">'szl'</span>,<span class="hljs-number">19</span>,<span class="hljs-string">'zmd'</span>,<span class="hljs-string">'stydent'</span>)Traceback (most recent call last):  File <span class="hljs-string">"&lt;stdin&gt;"</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;TypeError: person() takes <span class="hljs-number">2</span> positional arguments but <span class="hljs-number">4</span> were given<span class="hljs-comment">#位置参数多了</span></code></pre></div></blockquote><p>参数注意</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#必选参数&gt;默认参数&gt;可变参数&gt;命名关键字参数&gt;关键字参数</span><span class="hljs-comment">#*args和**kw是习惯写法</span></code></pre></div></blockquote></li><li><p>递归函数</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#内部调用自己就是递归函数</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact</span><span class="hljs-params">(n)</span>:</span><span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> n==<span class="hljs-number">1</span>:<span class="hljs-meta">... </span>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> n*fact(n<span class="hljs-number">-1</span>)...<span class="hljs-meta">&gt;&gt;&gt; </span>fact(<span class="hljs-number">2</span>)<span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span>fact(<span class="hljs-number">4</span>)<span class="hljs-number">24</span><span class="hljs-meta">&gt;&gt;&gt; </span>fact(<span class="hljs-number">100</span>)<span class="hljs-number">93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000</span><span class="hljs-comment">#递归函数要防止栈溢出</span><span class="hljs-comment">#函数调用通过栈实现，每进入一个函数调用，栈就会增加一层栈帧，每当函数返回，就会减一层栈帧，如果调用过多会溢出</span><span class="hljs-comment">#解决栈溢出的方法是通过尾递归优化，循环是一种特殊的尾递归</span><span class="hljs-comment">#尾递归指，函数返回时，调用自身本身，return语句不包含表达式，这样无论调用多少次，都只使用一个栈桢</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact</span><span class="hljs-params">(n)</span>:</span><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> fact_iter(n,<span class="hljs-number">1</span>)...<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact_iter</span><span class="hljs-params">(num,product)</span>:</span><span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> num==<span class="hljs-number">1</span>:<span class="hljs-meta">... </span>            <span class="hljs-keyword">return</span> product<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> fact_iter(num<span class="hljs-number">-1</span>,num*product)...<span class="hljs-meta">&gt;&gt;&gt; </span>fact(<span class="hljs-number">3</span>)<span class="hljs-number">6</span><span class="hljs-comment">#遗憾的是，大多数语言并没有对尾指针做优化，包括Python，所以即使这样写，仍然会溢出</span></code></pre></div></blockquote></li><li><p>切片</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#取一个list或者tuple或者str的部分元素是经常使用的操作</span><span class="hljs-comment">#可以使用，直接索引取或者循环取，但是很麻烦，所以有了切片</span><span class="hljs-comment">#取出前n个元素</span><span class="hljs-meta">&gt;&gt;&gt; </span>l=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>l[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]<span class="hljs-comment">#从索引0开始取，取到索引3为止，但不包括3</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>l[:<span class="hljs-number">3</span>]       <span class="hljs-comment">#从索引0开始，可以省略</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<span class="hljs-comment">#取某固定位置元素</span><span class="hljs-meta">&gt;&gt;&gt; </span>l[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<span class="hljs-comment">#也可以倒着取</span><span class="hljs-meta">&gt;&gt;&gt; </span>l[<span class="hljs-number">-2</span>:][<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]          <span class="hljs-comment">#取后几个</span><span class="hljs-meta">&gt;&gt;&gt; </span>l[<span class="hljs-number">-2</span>:<span class="hljs-number">-1</span>][<span class="hljs-number">3</span>]<span class="hljs-comment">#从-2取到-1但不包括-1</span><span class="hljs-comment">#对于一个长数列</span><span class="hljs-meta">&gt;&gt;&gt; </span>l=list(range(<span class="hljs-number">100</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>l[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>, <span class="hljs-number">34</span>, <span class="hljs-number">35</span>, <span class="hljs-number">36</span>, <span class="hljs-number">37</span>, <span class="hljs-number">38</span>, <span class="hljs-number">39</span>, <span class="hljs-number">40</span>, <span class="hljs-number">41</span>, <span class="hljs-number">42</span>, <span class="hljs-number">43</span>, <span class="hljs-number">44</span>, <span class="hljs-number">45</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">49</span>, <span class="hljs-number">50</span>, <span class="hljs-number">51</span>, <span class="hljs-number">52</span>, <span class="hljs-number">53</span>, <span class="hljs-number">54</span>, <span class="hljs-number">55</span>, <span class="hljs-number">56</span>, <span class="hljs-number">57</span>, <span class="hljs-number">58</span>, <span class="hljs-number">59</span>, <span class="hljs-number">60</span>, <span class="hljs-number">61</span>, <span class="hljs-number">62</span>, <span class="hljs-number">63</span>, <span class="hljs-number">64</span>, <span class="hljs-number">65</span>, <span class="hljs-number">66</span>, <span class="hljs-number">67</span>, <span class="hljs-number">68</span>, <span class="hljs-number">69</span>, <span class="hljs-number">70</span>, <span class="hljs-number">71</span>, <span class="hljs-number">72</span>, <span class="hljs-number">73</span>, <span class="hljs-number">74</span>, <span class="hljs-number">75</span>, <span class="hljs-number">76</span>, <span class="hljs-number">77</span>, <span class="hljs-number">78</span>, <span class="hljs-number">79</span>, <span class="hljs-number">80</span>, <span class="hljs-number">81</span>, <span class="hljs-number">82</span>, <span class="hljs-number">83</span>, <span class="hljs-number">84</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">89</span>, <span class="hljs-number">90</span>, <span class="hljs-number">91</span>, <span class="hljs-number">92</span>, <span class="hljs-number">93</span>, <span class="hljs-number">94</span>, <span class="hljs-number">95</span>, <span class="hljs-number">96</span>, <span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>l[:<span class="hljs-number">10</span>]  <span class="hljs-comment">#前十个</span>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>l[<span class="hljs-number">-10</span>:]  <span class="hljs-comment">#后十个</span>[<span class="hljs-number">90</span>, <span class="hljs-number">91</span>, <span class="hljs-number">92</span>, <span class="hljs-number">93</span>, <span class="hljs-number">94</span>, <span class="hljs-number">95</span>, <span class="hljs-number">96</span>, <span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>l[<span class="hljs-number">10</span>:<span class="hljs-number">20</span>]  <span class="hljs-comment">#11到20个</span>[<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>l[:<span class="hljs-number">10</span>:<span class="hljs-number">2</span>]  <span class="hljs-comment">#前十个，隔一个取一个</span>[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>l[::<span class="hljs-number">5</span>]   <span class="hljs-comment">#所有隔五个，取一个</span>[<span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>, <span class="hljs-number">25</span>, <span class="hljs-number">30</span>, <span class="hljs-number">35</span>, <span class="hljs-number">40</span>, <span class="hljs-number">45</span>, <span class="hljs-number">50</span>, <span class="hljs-number">55</span>, <span class="hljs-number">60</span>, <span class="hljs-number">65</span>, <span class="hljs-number">70</span>, <span class="hljs-number">75</span>, <span class="hljs-number">80</span>, <span class="hljs-number">85</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>l[:]     <span class="hljs-comment">#取全部</span>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>, <span class="hljs-number">34</span>, <span class="hljs-number">35</span>, <span class="hljs-number">36</span>, <span class="hljs-number">37</span>, <span class="hljs-number">38</span>, <span class="hljs-number">39</span>, <span class="hljs-number">40</span>, <span class="hljs-number">41</span>, <span class="hljs-number">42</span>, <span class="hljs-number">43</span>, <span class="hljs-number">44</span>, <span class="hljs-number">45</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">49</span>, <span class="hljs-number">50</span>, <span class="hljs-number">51</span>, <span class="hljs-number">52</span>, <span class="hljs-number">53</span>, <span class="hljs-number">54</span>, <span class="hljs-number">55</span>, <span class="hljs-number">56</span>, <span class="hljs-number">57</span>, <span class="hljs-number">58</span>, <span class="hljs-number">59</span>, <span class="hljs-number">60</span>, <span class="hljs-number">61</span>, <span class="hljs-number">62</span>, <span class="hljs-number">63</span>, <span class="hljs-number">64</span>, <span class="hljs-number">65</span>, <span class="hljs-number">66</span>, <span class="hljs-number">67</span>, <span class="hljs-number">68</span>, <span class="hljs-number">69</span>, <span class="hljs-number">70</span>, <span class="hljs-number">71</span>, <span class="hljs-number">72</span>, <span class="hljs-number">73</span>, <span class="hljs-number">74</span>, <span class="hljs-number">75</span>, <span class="hljs-number">76</span>, <span class="hljs-number">77</span>, <span class="hljs-number">78</span>, <span class="hljs-number">79</span>, <span class="hljs-number">80</span>, <span class="hljs-number">81</span>, <span class="hljs-number">82</span>, <span class="hljs-number">83</span>, <span class="hljs-number">84</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">89</span>, <span class="hljs-number">90</span>, <span class="hljs-number">91</span>, <span class="hljs-number">92</span>, <span class="hljs-number">93</span>, <span class="hljs-number">94</span>, <span class="hljs-number">95</span>, <span class="hljs-number">96</span>, <span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>]<span class="hljs-comment">#tuple和str操作完全一致</span></code></pre></div></blockquote></li><li><p>迭代</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#可迭代对象可以通过迭代for in 来遍历</span><span class="hljs-comment">#判断对象是否为可迭代对象</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterable<span class="hljs-meta">&gt;&gt;&gt; </span>isinstance(<span class="hljs-string">'abc'</span>,Iterable)<span class="hljs-literal">True</span><span class="hljs-meta">&gt;&gt;&gt; </span>isinstance([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],Iterable)<span class="hljs-literal">True</span><span class="hljs-comment">#对list实现类似下标循环</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i,value <span class="hljs-keyword">in</span> enumerate([<span class="hljs-string">'szl'</span>,<span class="hljs-string">'hhy'</span>,<span class="hljs-string">'shb'</span>]):<span class="hljs-meta">... </span>    print(i,value)...<span class="hljs-number">0</span> szl<span class="hljs-number">1</span> hhy<span class="hljs-number">2</span> shb</code></pre></div></blockquote></li><li><p>列表生成器</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#生成[1,2,3,4,5...,9,10]</span><span class="hljs-meta">&gt;&gt;&gt; </span>list(range(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>))[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<span class="hljs-comment">#生成[1*1,2*2,...,9*9,10*10]</span><span class="hljs-meta">&gt;&gt;&gt; </span>[x*x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>)][<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">49</span>, <span class="hljs-number">64</span>, <span class="hljs-number">81</span>, <span class="hljs-number">100</span>]<span class="hljs-comment">#筛选偶数创建</span><span class="hljs-meta">&gt;&gt;&gt; </span>[x*x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>) <span class="hljs-keyword">if</span> x%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>][<span class="hljs-number">4</span>, <span class="hljs-number">16</span>, <span class="hljs-number">36</span>, <span class="hljs-number">64</span>, <span class="hljs-number">100</span>]<span class="hljs-comment">#两层循环，生成全排列</span><span class="hljs-meta">&gt;&gt;&gt; </span>[m+n <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-string">'abc'</span> <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-string">'def'</span>][<span class="hljs-string">'ad'</span>, <span class="hljs-string">'ae'</span>, <span class="hljs-string">'af'</span>, <span class="hljs-string">'bd'</span>, <span class="hljs-string">'be'</span>, <span class="hljs-string">'bf'</span>, <span class="hljs-string">'cd'</span>, <span class="hljs-string">'ce'</span>, <span class="hljs-string">'cf'</span>]<span class="hljs-comment">#列出当前目录下所有文件名和目录名</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> os<span class="hljs-meta">&gt;&gt;&gt; </span>[d <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> os.listdir(<span class="hljs-string">'.'</span>)][<span class="hljs-string">'abstest.py'</span>, <span class="hljs-string">'__pycache__'</span>]<span class="hljs-comment">#使用两个变量生成list</span><span class="hljs-meta">&gt;&gt;&gt; </span>d=&#123;<span class="hljs-string">'x'</span>:<span class="hljs-string">'A'</span>,<span class="hljs-string">'y'</span>:<span class="hljs-string">'B'</span>&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>[k+<span class="hljs-string">'='</span>+v <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> d.items()][<span class="hljs-string">'x=A'</span>, <span class="hljs-string">'y=B'</span>]<span class="hljs-comment">#筛选创建时，如果if在for前面，就需要加else，如果在后面，不能加else</span><span class="hljs-comment">#instance（x，str）可以判断x是不是str类型</span></code></pre></div></blockquote><p>生成器</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#边循环边执行</span><span class="hljs-comment">#第一种创建方式，把列表生成器的[]换成（）</span><span class="hljs-meta">&gt;&gt;&gt; </span>g=(x*x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>g&lt;generator object &lt;genexpr&gt; at <span class="hljs-number">0x00000291BA4562E0</span>&gt;<span class="hljs-comment">#使用next（）可以获得下一个返回值</span><span class="hljs-meta">&gt;&gt;&gt; </span>next(g)<span class="hljs-number">0</span><span class="hljs-meta">&gt;&gt;&gt; </span>next(g)<span class="hljs-number">1</span><span class="hljs-meta">&gt;&gt;&gt; </span>next(g)<span class="hljs-number">4</span><span class="hljs-meta">&gt;&gt;&gt; </span>next(g)<span class="hljs-number">9</span><span class="hljs-comment">#但是基本上都使用循环代替</span><span class="hljs-meta">&gt;&gt;&gt; </span>g=(x*x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>))<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> g:<span class="hljs-meta">... </span>    print(n)...<span class="hljs-number">0</span><span class="hljs-number">1</span><span class="hljs-number">4</span><span class="hljs-number">9</span><span class="hljs-number">16</span><span class="hljs-number">25</span><span class="hljs-number">36</span><span class="hljs-number">49</span><span class="hljs-number">64</span><span class="hljs-number">81</span><span class="hljs-comment">#第二种创建方式，函数创建</span><span class="hljs-comment">#普通的斐波那契数列函数</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span><span class="hljs-params">(max)</span>:</span><span class="hljs-meta">... </span>    n,a,b=<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span><span class="hljs-meta">... </span>    <span class="hljs-keyword">while</span> n&lt;max:<span class="hljs-meta">... </span>            print(b)<span class="hljs-meta">... </span>            a,b=b,a+b<span class="hljs-meta">... </span>            n=n+<span class="hljs-number">1</span><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> <span class="hljs-string">'done'</span>...<span class="hljs-meta">&gt;&gt;&gt; </span>fib(<span class="hljs-number">6</span>)<span class="hljs-number">1</span><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">3</span><span class="hljs-number">5</span><span class="hljs-number">8</span><span class="hljs-string">'done'</span><span class="hljs-comment">#把fib函数变成generator，只需把print（b）换成yield b即可</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span><span class="hljs-params">(max)</span>:</span><span class="hljs-meta">... </span>    a,b,n=<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span><span class="hljs-meta">... </span>    <span class="hljs-keyword">while</span> n&lt;max:<span class="hljs-meta">... </span>            <span class="hljs-keyword">yield</span> b<span class="hljs-meta">... </span>            a,b=b,a+b<span class="hljs-meta">... </span>            n=n+<span class="hljs-number">1</span><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> <span class="hljs-string">'done'</span>...<span class="hljs-meta">&gt;&gt;&gt; </span>f=fib<span class="hljs-meta">&gt;&gt;&gt; </span>f&lt;function fib at <span class="hljs-number">0x00000291BA478280</span>&gt;<span class="hljs-comment">#也通过循环遍历</span></code></pre></div></blockquote><p>迭代器</p><blockquote>  <div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#可以作用于for循环的数据类型有</span><span class="hljs-comment">#list、tuple、dict、set、str</span><span class="hljs-comment">#generator：生成器和带yield的henerator function</span><span class="hljs-comment">#使用isinstance（）判断一个对象是否为迭代器</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterator<span class="hljs-meta">&gt;&gt;&gt; </span>isinstance([],Iterator)<span class="hljs-literal">False</span><span class="hljs-meta">&gt;&gt;&gt; </span>isinstance(&#123;&#125;,Iterator)<span class="hljs-literal">False</span><span class="hljs-comment">#生成器都是Iterator对象，list、dict、str虽是Iterable却不是Iterator</span><span class="hljs-comment">#可以使用iter（）函数将Iterable转化为Iterator</span><span class="hljs-meta">&gt;&gt;&gt; </span>isinstance(iter([]),Iterator)<span class="hljs-literal">True</span><span class="hljs-comment">#Python的Iterator表示一个数据流，计算是惰性的只有调用到时候才会计算</span></code></pre></div></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ToInstall</title>
    <link href="/2020/03/14/to%20install/"/>
    <url>/2020/03/14/to%20install/</url>
    
    <content type="html"><![CDATA[<h2 id="Some-Softwares-To-Install"><a href="#Some-Softwares-To-Install" class="headerlink" title="Some Softwares To Install"></a>Some Softwares To Install</h2><a id="more"></a><h4 id="开发类："><a href="#开发类：" class="headerlink" title="开发类："></a>开发类：</h4><ul><li>vs2019</li><li>matlab</li><li>pycharm</li></ul><h4 id="游戏类："><a href="#游戏类：" class="headerlink" title="游戏类："></a>游戏类：</h4><ul><li>wegame</li><li>lol</li><li>steam：壁纸  hacknet</li><li>QQ游戏大厅</li></ul><h4 id="影音类："><a href="#影音类：" class="headerlink" title="影音类："></a>影音类：</h4><ul><li>网易云音乐</li><li>QQ音乐</li><li>虎牙直播</li></ul><h4 id="学习工作类："><a href="#学习工作类：" class="headerlink" title="学习工作类："></a>学习工作类：</h4><ul><li>office</li><li>wps</li></ul><h4 id="社交类："><a href="#社交类：" class="headerlink" title="社交类："></a>社交类：</h4><ul><li>QQ</li><li>Wechat</li></ul><h4 id="工具类："><a href="#工具类：" class="headerlink" title="工具类："></a>工具类：</h4><ul><li><p>//GooleChrome</p></li><li><p>百度云盘</p></li><li><p>//git</p></li><li><p>//nodejs</p></li><li><p>//hexo</p></li><li><p>//python 3.8</p></li><li><p><strong>bandzip</strong></p></li><li><p>notepad++</p></li><li><p>//vscode</p></li><li><p>//ccleaner</p></li><li><p>potplayer</p></li><li><p>火绒安全工具</p></li><li><p>everything</p></li></ul><h4 id="高效工作："><a href="#高效工作：" class="headerlink" title="高效工作："></a>高效工作：</h4><ul><li>//mouseinc  鼠标控制</li><li>//utools </li><li>share x  steam截图</li><li>idm 下载器</li><li>quicklook 照片和视频预览  微软商店免费</li><li>translucent   任务栏透明  微软商店免费</li></ul><p><img src="/img/post/softw.png" srcset="/img/loading.gif" alt=""></p><p><img src="/img/post/softw2.png" srcset="/img/loading.gif" alt=""></p><p><img src="/img/post/softw3.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>HelloWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HelloWorld</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理随笔</title>
    <link href="/2020/03/07/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E9%9A%8F%E7%AC%94/"/>
    <url>/2020/03/07/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E9%9A%8F%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<h2 id="自动机理论"><a href="#自动机理论" class="headerlink" title="自动机理论"></a>自动机理论</h2><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><blockquote><p>[TOC]</p></blockquote><h2 id="第一章-自动机"><a href="#第一章-自动机" class="headerlink" title="第一章    自动机"></a>第一章    自动机</h2><h4 id="1、为什么研究自动机理论"><a href="#1、为什么研究自动机理论" class="headerlink" title="1、为什么研究自动机理论"></a>1、为什么研究自动机理论</h4><ol><li>有穷自动机简介</li><li>结构表示法<ul><li>两种重要记号<ul><li>文法</li><li>正则表达式</li></ul></li></ul></li><li>自动机与复杂性</li></ol><h4 id="2、形式化证明简介"><a href="#2、形式化证明简介" class="headerlink" title="2、形式化证明简介"></a>2、形式化证明简介</h4><ol><li>演绎证明</li><li>求助于定义</li><li>其他定理形式</li><li>表面上不是“如果-则”命题的定理</li></ol><h4 id="3、其他证明形式"><a href="#3、其他证明形式" class="headerlink" title="3、其他证明形式"></a>3、其他证明形式</h4><ol><li>证明集合等价性</li><li>逆否命题</li><li>反证法</li><li>反例</li></ol><h4 id="4、归纳证明"><a href="#4、归纳证明" class="headerlink" title="4、归纳证明"></a>4、归纳证明</h4><ol><li>整数上归纳法</li><li>一般形式整数归纳法</li><li>结构归纳法</li><li>互归纳法</li></ol><p>5、自动机理论中心概念</p><ol><li>字母表<ul><li>是符号的有穷非空集合，用∑表示</li></ul></li><li>串<ul><li>从字母表中选择的符号的有穷序列</li><li>空串ε</li><li>串的长度–符号位数</li><li>字母表的幂<ul><li>∑^k^表示在字母表∑上的长度为k的串</li><li>∑^*^表示在字母表∑上的所有串</li><li>∑^+^表示在字母表∑上的非空串集合</li></ul></li><li>串的连接</li></ul></li><li>语言<ul><li>从∑^*^上选出的串的某个集合L</li><li>集合表示法可以作为定义语言的方式</li></ul></li><li>问题<ul><li>给定串w，判断是否属于语言L</li></ul></li></ol><h4 id="6、小结"><a href="#6、小结" class="headerlink" title="6、小结"></a>6、小结</h4><ul><li></li></ul><hr><h2 id="第二章-有穷自动机"><a href="#第二章-有穷自动机" class="headerlink" title="第二章    有穷自动机"></a>第二章    有穷自动机</h2><h4 id="1、有穷自动机的非形式化描述"><a href="#1、有穷自动机的非形式化描述" class="headerlink" title="1、有穷自动机的非形式化描述"></a>1、有穷自动机的非形式化描述</h4><ol><li>基本规则</li><li>协议</li><li>允许自动机忽略动作<ul><li>两类必须忽略动作<ul><li>与各方无关的动作</li><li>导致自动机死亡的动作</li></ul></li></ul></li><li>整个系统成为一个自动机</li><li>用乘积自动机验证协议</li></ol><h4 id="2、确定型有穷自动机"><a href="#2、确定型有穷自动机" class="headerlink" title="2、确定型有穷自动机"></a>2、确定型有穷自动机</h4><ol><li>确定型有穷自动机的形式化定义<ul><li>一个有穷的状态集合Q</li><li>一个有穷的输入符号集合∑</li><li>一个转移函数δ</li><li>一个初始状态q<del>0</del>，Q中之一</li><li>一个接收状态集合F，Q的子集</li><li>五元组定义为（Q，∑，δ，q<del>0</del>，F）</li></ul></li><li>DFA如何处理串</li><li>DFA的简化记号<ul><li>转移图</li><li>转移表</li></ul></li><li>把转移函数扩展到串<ul><li>使用扩展转移函数</li></ul></li><li>DFA的语言<ul><li>让初始状态q<del>0</del>通向接受状态之一的串w的集合</li></ul></li></ol><h4 id="3、非确定的有穷自动机"><a href="#3、非确定的有穷自动机" class="headerlink" title="3、非确定的有穷自动机"></a>3、非确定的有穷自动机</h4><ol><li>其非形式化观点<ul><li>区别在于NFA的转移函数可能返回不止一个状态</li><li>死亡情况可忽略</li><li>NFA转移表每一项都是一个状态的集合或者空集合</li></ul></li><li>定义<ul><li>一个有穷的状态集合Q</li><li>一个有穷的输入符号集合∑</li><li>一个转移函数δ</li><li>一个初始状态q<del>0</del>，Q中之一</li><li>一个接收状态集合F，Q的子集</li><li>五元组定义为（Q，∑，δ，q<del>0</del>，F）</li></ul></li><li>扩展转移函数</li><li>NFA的语言<ul><li>让初始状态q<del>0</del>至少有一条路径通向接受状态之一的串w的集合</li></ul></li><li>确定型与非确定型有穷自动机的等价性<ul><li>子集构造：说明如何形式化用一个自动机的状态和转移来描述另一个自动机</li></ul></li><li>子集构造的坏情况</li></ol><h4 id="4、应用：文本搜索"><a href="#4、应用：文本搜索" class="headerlink" title="4、应用：文本搜索"></a>4、应用：文本搜索</h4><ol><li>在文本中查找串  </li><li>文本搜索的非确定型有穷自动机</li><li>识别关键字集合的DFA</li></ol><h4 id="5、带ε转移的有穷自动机"><a href="#5、带ε转移的有穷自动机" class="headerlink" title="5、带ε转移的有穷自动机"></a>5、带ε转移的有穷自动机</h4><ol><li>ε转移的用途</li><li>ε-NFA的形式化定义</li><li>ε闭包</li><li>ε-NFA的扩展转移和语言</li><li>消除ε转移</li></ol><h4 id="6、小结-1"><a href="#6、小结-1" class="headerlink" title="6、小结"></a>6、小结</h4><hr><h2 id="第三章-词法分析"><a href="#第三章-词法分析" class="headerlink" title="第三章    词法分析"></a>第三章    词法分析</h2><h4 id="1、正则表达式（RE）"><a href="#1、正则表达式（RE）" class="headerlink" title="1、正则表达式（RE）"></a>1、正则表达式（RE）</h4><ul><li>是一种用来描述正则语言的更紧凑的表达方式</li><li>每个正则表达式r定义一个语言L（r）</li><li>递归定义：<ul><li>空串ε是一个RE，L（ε）= { ε }；</li><li>如果a属于∑，则a是一个RE，L（a）= { a }；</li><li>假设r和s都是RE则 <ul><li>r | s是一个RE，L（r | s）=两语言并集</li><li>rs是一个RE，两语言乘积</li><li>r^*^是一个RE，语言的克林闭包</li><li>（r）是一个RE，原语言</li></ul></li></ul></li><li>正则语言：可以用RE定义的语言，也叫正则集合</li><li>正则文法与正则表达式的等价</li></ul><h4 id="2、正则定义"><a href="#2、正则定义" class="headerlink" title="2、正则定义"></a>2、正则定义</h4><ul><li>如下形式<ul><li>d<del>i</del>   代表某个RE  r<del>i</del></li><li>每个   d<del>i</del>   都是一个新符号</li><li>每个   r<del>i</del>   是   ∑   并上   {d<del>i</del>}   上的正则表达式</li></ul></li></ul><h4 id="3、有穷自动机"><a href="#3、有穷自动机" class="headerlink" title="3、有穷自动机"></a>3、有穷自动机</h4><ul><li>最长子串匹配原则</li><li>DFA<ul><li>（S，∑，δ，s<del>0</del>，F）</li><li>δ：S×∑→S</li></ul></li><li>NFA<ul><li>（S，∑，δ，s0，F）</li><li>δ：S×∑→2^S^</li></ul></li><li>带有ε-边的NFA<ul><li>（S，∑，δ，s0，F）</li><li>δ：S×（  ∑并{ε}  ）→2^S^</li></ul></li><li>两种自动机的等价性</li><li>带不带ε-边的等价性</li></ul><h4 id="4、从正则表达式到有穷自动机"><a href="#4、从正则表达式到有穷自动机" class="headerlink" title="4、从正则表达式到有穷自动机"></a>4、从正则表达式到有穷自动机</h4><ul><li>根据RE构造NFA<ul><li>并联、串联、克林闭包</li></ul></li></ul><h4 id="5、从NFA到DFA的转换"><a href="#5、从NFA到DFA的转换" class="headerlink" title="5、从NFA到DFA的转换"></a>5、从NFA到DFA的转换</h4><ul><li>NFA    转换表    DFA</li><li>子集构造法</li></ul><h4 id="6、识别单词的DFA"><a href="#6、识别单词的DFA" class="headerlink" title="6、识别单词的DFA"></a>6、识别单词的DFA</h4><ul><li>标识符</li><li>无符号数</li><li>注释</li></ul>]]></content>
    
    
    <categories>
      
      <category>我的学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我的学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不考虑价值的简单背包问题</title>
    <link href="/2020/03/07/%E8%83%8C%E5%8C%85/"/>
    <url>/2020/03/07/%E8%83%8C%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h2 id="原题目为"><a href="#原题目为" class="headerlink" title="原题目为"></a>原题目为</h2><p>假设有一个能装入总体积为T的背包和N件体积分别任w1、w2、w3、……wn的物品，能否从n件物品中挑选若干件恰好装满背包，即w1+w2+……Wn = T，要求满足上述条件的解。<br>例如，当T = 10，各件物品的体积为{1、8、4、3、5、2}时，可以找到下列4组解：<br>(1,4,3,2)、(1，4，5)、(8，2)、(3，5，2)</p><a id="more"></a><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span>&#123;</span><span class="hljs-keyword">private</span>:<span class="hljs-keyword">int</span> vleft; <span class="hljs-comment">//剩余空间</span><span class="hljs-keyword">int</span> vmax; <span class="hljs-comment">//总空间</span><span class="hljs-keyword">int</span> maxsize;  <span class="hljs-comment">//栈的最大空间</span><span class="hljs-keyword">int</span> *base;  <span class="hljs-comment">//栈底指针</span><span class="hljs-keyword">int</span> top;      <span class="hljs-comment">//栈顶指针</span><span class="hljs-keyword">public</span>:Stack(<span class="hljs-keyword">int</span> size,<span class="hljs-keyword">int</span> t)   <span class="hljs-comment">//栈的定义</span>&#123;vmax = t;vleft = t;maxsize = size;base = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[maxsize];<span class="hljs-keyword">if</span>(base==<span class="hljs-literal">NULL</span>)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"分配内存失败"</span>; <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;top = <span class="hljs-number">0</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;e)</span>        <span class="hljs-comment">//将元素e入栈</span></span>&#123; base[top++] = e; vleft -= e;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Pop</span><span class="hljs-params">()</span>               <span class="hljs-comment">//出栈</span></span>&#123;vleft += base[--top];&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; top; j++)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; base[j] &lt;&lt; <span class="hljs-string">" "</span>;<span class="hljs-keyword">if</span> (j == top - <span class="hljs-number">1</span>)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">judge</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">if</span> (vleft &gt; <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-keyword">if</span> (vleft == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<span class="hljs-keyword">if</span> (vleft &lt; <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">judge1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> q)</span></span>&#123;<span class="hljs-keyword">if</span> (vleft &gt;= q)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<span class="hljs-comment">// 或者直接 return vleft&gt;=q;</span>&#125;&#125;;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">int</span> n;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"请输入物品个数"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-built_in">cin</span> &gt;&gt; n;<span class="hljs-keyword">int</span> t;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"请输入背包体积"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-built_in">cin</span> &gt;&gt; t;<span class="hljs-function">Stack <span class="hljs-title">Bag</span><span class="hljs-params">(n,t)</span></span>;    <span class="hljs-comment">//定义栈的背包对象</span><span class="hljs-keyword">int</span> *p;p = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<span class="hljs-keyword">int</span> *pp;pp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;pp[j] = <span class="hljs-number">0</span>;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"请输入物品大小"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-built_in">cin</span> &gt;&gt; p[j];&#125;<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<span class="hljs-keyword">if</span> (Bag.judge1(p[i]))&#123;Bag.Push(p[i]);pp[l] = i;l++;i++;<span class="hljs-keyword">break</span>;&#125;&#125;<span class="hljs-keyword">int</span> j;<span class="hljs-keyword">while</span> (l&gt;=<span class="hljs-number">0</span>)&#123;j = pp[l] + <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span>(Bag.judge()&lt;<span class="hljs-number">3</span> &amp;&amp; j&lt;n)&#123;Bag.Push(p[j]);pp[l] = j;l++;<span class="hljs-keyword">if</span> (Bag.judge() == <span class="hljs-number">2</span>)&#123;Bag.output();<span class="hljs-comment">/*system("pause");*/</span>Bag.Pop();j++;l--;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Bag.judge() &lt; <span class="hljs-number">3</span>)j++;<span class="hljs-keyword">else</span>&#123;Bag.Pop();l--;j++;&#125;&#125;Bag.Pop();l--;&#125;getchar();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>程序设计课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序设计课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哈夫曼树的生成和编码</title>
    <link href="/2020/03/07/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E7%94%9F%E6%88%90%E4%BB%A5%E5%8F%8A%E7%BC%96%E7%A0%81/"/>
    <url>/2020/03/07/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E7%94%9F%E6%88%90%E4%BB%A5%E5%8F%8A%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>给定N个权值作为N个叶子结点，构造一棵二叉树，若该树的带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree)。哈夫曼树是带权路径长度最短的树，权值较大的结点离根较近。<a id="more"></a></p><div class="hljs"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;&lt;!--more--&gt;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ELEMTYPE;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HuffmanTree</span>&#123;</span>ELEMTYPE weight;<span class="hljs-keyword">char</span> value;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HuffmanTree</span>* <span class="hljs-title">lchild</span>;</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HuffmanTree</span>* <span class="hljs-title">rchild</span>;</span>&#125;HuffmanNode;<span class="hljs-comment">// 构建哈夫曼树</span><span class="hljs-function">HuffmanNode* <span class="hljs-title">createHuffmanTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* a,<span class="hljs-keyword">char</span>* b,<span class="hljs-keyword">int</span> n)</span></span>&#123;<span class="hljs-keyword">int</span> i, j;HuffmanNode **temp, *hufmTree;temp = (HuffmanNode **)<span class="hljs-built_in">malloc</span>(n * <span class="hljs-keyword">sizeof</span>(HuffmanNode));<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; ++i)     <span class="hljs-comment">// 将数组a中的权值赋给结点中的weight</span>&#123;temp[i] = (HuffmanNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(HuffmanNode));temp[i]-&gt;weight = a[i];temp[i]-&gt;lchild = temp[i]-&gt;rchild = <span class="hljs-literal">NULL</span>;temp[i]-&gt;value = b[i];&#125;<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; ++i)       <span class="hljs-comment">// n-1次合并</span>&#123;<span class="hljs-keyword">int</span> small1 = <span class="hljs-number">-1</span>, small2;      <span class="hljs-comment">// small1、small2分别作为最小和次小权值的下标</span><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; n; ++j)         <span class="hljs-comment">// 先将最小的两个下标赋给small1、small2（注意：对应权值未必最小）</span>&#123;<span class="hljs-keyword">if</span> (temp[j] != <span class="hljs-literal">NULL</span> &amp;&amp; small1 == <span class="hljs-number">-1</span>)&#123;small1 = j;<span class="hljs-keyword">continue</span>;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp[j] != <span class="hljs-literal">NULL</span>)&#123;small2 = j;<span class="hljs-keyword">break</span>;&#125;&#125;<span class="hljs-keyword">if</span> (small1 &gt; small2)&#123;<span class="hljs-keyword">int</span> t = small1;small1 = small2;small2 = t;&#125;<span class="hljs-keyword">for</span> (j = small2; j &lt; n; ++j)    <span class="hljs-comment">// 比较权值，挪动small1和small2使之分别成为最小和次小权值的下标</span>&#123;<span class="hljs-keyword">if</span> (temp[j] != <span class="hljs-literal">NULL</span>)&#123;<span class="hljs-keyword">if</span> (temp[j]-&gt;weight &lt; temp[small1]-&gt;weight)&#123;small2 = small1;small1 = j;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp[j]-&gt;weight &lt; temp[small2]-&gt;weight)&#123;small2 = j;&#125;&#125;&#125;hufmTree = (HuffmanNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(HuffmanNode));hufmTree-&gt;weight = temp[small1]-&gt;weight + temp[small2]-&gt;weight;hufmTree-&gt;lchild = temp[small1];hufmTree-&gt;rchild = temp[small2];temp[small1] = hufmTree;temp[small2] = <span class="hljs-literal">NULL</span>;&#125;<span class="hljs-keyword">return</span> hufmTree;&#125;<span class="hljs-comment">// 递归进行哈夫曼编码</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HuffmanCode</span><span class="hljs-params">(HuffmanNode* hufmTree, <span class="hljs-keyword">int</span> depth,<span class="hljs-keyword">int</span>*code)</span>      <span class="hljs-comment">// depth是哈夫曼树的深度</span></span>&#123;<span class="hljs-keyword">if</span> (hufmTree)&#123;<span class="hljs-keyword">if</span> (hufmTree-&gt;lchild == <span class="hljs-literal">NULL</span> &amp;&amp; hufmTree-&gt;rchild == <span class="hljs-literal">NULL</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c的哈夫曼编码为 "</span>,  hufmTree-&gt;value);<span class="hljs-keyword">int</span> i;<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; depth; ++i)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>, code[i]);&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);&#125;<span class="hljs-keyword">else</span>&#123;code[depth] = <span class="hljs-number">0</span>;HuffmanCode(hufmTree-&gt;lchild, depth + <span class="hljs-number">1</span>,code);code[depth] = <span class="hljs-number">1</span>;HuffmanCode(hufmTree-&gt;rchild, depth + <span class="hljs-number">1</span>,code);&#125;&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">int</span> i, n;<span class="hljs-keyword">char</span> <span class="hljs-built_in">string</span>[<span class="hljs-number">100</span>];<span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入叶子结点的个数：\n"</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);<span class="hljs-keyword">int</span>* arr;arr = (<span class="hljs-keyword">int</span>*)<span class="hljs-built_in">malloc</span>(n * <span class="hljs-keyword">sizeof</span>(ELEMTYPE));<span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入%d个叶子结点的权值及其各自代表的字符：\n"</span>, n);<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; ++i)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"第%d个"</span>,i+<span class="hljs-number">1</span>); <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;arr[i]);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%c"</span>, &amp;<span class="hljs-built_in">string</span>[i]);&#125;HuffmanNode* hufmTree = <span class="hljs-literal">NULL</span>;hufmTree = createHuffmanTree(arr,<span class="hljs-built_in">string</span>,n);<span class="hljs-keyword">int</span> code[<span class="hljs-number">100</span>];<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n各叶子结点的哈夫曼编码为：\n"</span>);HuffmanCode(hufmTree, <span class="hljs-number">0</span>,code);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p><em>注意输入时权值与字符之间不加符号，否则会将空格当作字符，可以加一个getchar（）来实现</em>。</p><p><strong>本文改编自<br><a href="https://blog.csdn.net/F__shigang/article/details/65442550" target="_blank" rel="noopener">https://blog.csdn.net/F__shigang/article/details/65442550</a></strong><br><strong>删改了一些内容。</strong></p>]]></content>
    
    
    <categories>
      
      <category>程序设计课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序设计课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字电子技术基础随笔</title>
    <link href="/2020/03/07/%E6%95%B0%E7%94%B5%E7%AC%94%E8%AE%B01.0/"/>
    <url>/2020/03/07/%E6%95%B0%E7%94%B5%E7%AC%94%E8%AE%B01.0/</url>
    
    <content type="html"><![CDATA[<h2 id="记录一下数电的学习"><a href="#记录一下数电的学习" class="headerlink" title="记录一下数电的学习"></a>记录一下数电的学习</h2><p><img src="https://pic1.zhimg.com/80/v2-70eccc2293c5f7f0620fe3b4c48055dd_720w.jpg" srcset="/img/loading.gif" alt="我爱学习"></p><h1 id="1数制"><a href="#1数制" class="headerlink" title="1数制"></a>1数制</h1><h3 id="1-1-数制介绍"><a href="#1-1-数制介绍" class="headerlink" title="1.1 数制介绍"></a>1.1 数制介绍</h3><ul><li><p>n进制=逢n进位</p></li><li><p>十六进制书写二进制的4、8、16位十分方便，成为主流进制</p></li></ul><h3 id="1-2-数制转换"><a href="#1-2-数制转换" class="headerlink" title="1.2 数制转换"></a>1.2 数制转换</h3><h5 id="一、各种进制转换为十进制"><a href="#一、各种进制转换为十进制" class="headerlink" title="一、各种进制转换为十进制"></a>一、各种进制转换为十进制</h5><ul><li>按位加权求和</li></ul><h5 id="二、十进制转换为其他进制"><a href="#二、十进制转换为其他进制" class="headerlink" title="二、十进制转换为其他进制"></a>二、十进制转换为其他进制</h5><ul><li><h6 id="十进制-–-gt-二进制"><a href="#十进制-–-gt-二进制" class="headerlink" title="十进制 –&gt; 二进制"></a>十进制 –&gt; 二进制</h6><ul><li>整数部分转换：除二取余，逆序排列</li><li>小数部分转换：乘二取整，顺序排列</li></ul></li><li><h6 id="十进制-–-gt-其它R进制"><a href="#十进制-–-gt-其它R进制" class="headerlink" title="十进制 –&gt; 其它R进制"></a>十进制 –&gt; 其它R进制</h6><ul><li>整数部分转换：除R取余，逆序排列</li><li>小数部分转换：乘R取整，顺序排列</li></ul></li></ul><h5 id="三、二进制与八进制"><a href="#三、二进制与八进制" class="headerlink" title="三、二进制与八进制"></a>三、二进制与八进制</h5><ul><li><h6 id="二进制-–-gt-八进制"><a href="#二进制-–-gt-八进制" class="headerlink" title="二进制 –&gt; 八进制"></a>二进制 –&gt; 八进制</h6><ul><li>二进制数从小数点开始分别向右和向左分成三组一位，每位依次换位三进制，不足补0</li></ul></li><li><h6 id="八进制-–-gt-二进制"><a href="#八进制-–-gt-二进制" class="headerlink" title="八进制 –&gt; 二进制"></a>八进制 –&gt; 二进制</h6><ul><li>各八进制数按位展开三位二进制即可</li></ul></li></ul><h5 id="四、二进制与十六进制"><a href="#四、二进制与十六进制" class="headerlink" title="四、二进制与十六进制"></a>四、二进制与十六进制</h5><ul><li>同上</li></ul><h5 id="五、八进制与十六进制"><a href="#五、八进制与十六进制" class="headerlink" title="五、八进制与十六进制"></a>五、八进制与十六进制</h5><ul><li>利用二进制为中介即可</li></ul><h3 id="1-3-二进制正负数及其表示"><a href="#1-3-二进制正负数及其表示" class="headerlink" title="1.3 二进制正负数及其表示"></a>1.3 二进制正负数及其表示</h3><h5 id="一、二进制的两种运算"><a href="#一、二进制的两种运算" class="headerlink" title="一、二进制的两种运算"></a>一、二进制的两种运算</h5><ul><li>算术运算=加减乘除</li><li>逻辑运算</li></ul><h5 id="二、二进制数正负数表示法"><a href="#二、二进制数正负数表示法" class="headerlink" title="二、二进制数正负数表示法"></a>二、二进制数正负数表示法</h5><ul><li>用“0”表示正号，用“1”表示负号</li></ul><h5 id="三、二进制正负数的定点表示法"><a href="#三、二进制正负数的定点表示法" class="headerlink" title="三、二进制正负数的定点表示法"></a>三、二进制正负数的定点表示法</h5><ul><li>整数定点：最高位为符号位，小数点在末尾</li><li>小数定点：最高位为符号位，小数点在第一位和第二位之间</li></ul><h5 id="四、二进制正负数浮点表示法"><a href="#四、二进制正负数浮点表示法" class="headerlink" title="四、二进制正负数浮点表示法"></a>四、二进制正负数浮点表示法</h5><ul><li>小数点位置可变</li></ul><h3 id="1-4-二进制数补码及其运算"><a href="#1-4-二进制数补码及其运算" class="headerlink" title="1.4 二进制数补码及其运算"></a>1.4 二进制数补码及其运算</h3><h5 id="一、三种表示法"><a href="#一、三种表示法" class="headerlink" title="一、三种表示法"></a>一、三种表示法</h5><ul><li>原码表示</li><li>反码表示<ul><li>正数：等于原码</li><li>负数：等于原码数值位按位取反</li></ul></li><li>补码表示<ul><li>正数：等于原码</li><li>负数：等于反码在末位加1</li></ul></li></ul><h5 id="二、补码运算"><a href="#二、补码运算" class="headerlink" title="二、补码运算"></a>二、补码运算</h5><ul><li>减法：转换成加法</li><li>加减乘除四种运算都可以只用“移位”和“加法”两个操作实现</li></ul><h3 id="1-5-小结"><a href="#1-5-小结" class="headerlink" title="1.5 小结"></a>1.5 小结</h3><ul><li>二进制（B）</li><li>十进制（D）</li><li>八进制（O）</li><li>十六进制（H）主流进制</li></ul><hr><h1 id="2-码制"><a href="#2-码制" class="headerlink" title="2 码制"></a>2 码制</h1><h3 id="2-1-码制定义"><a href="#2-1-码制定义" class="headerlink" title="2.1 码制定义"></a>2.1 码制定义</h3><ul><li>用数字技术来处理和传输以<strong>二进制</strong>形式表示的<strong>数字、字母或特殊符号</strong>的系统</li><li>用<strong>文字、符号或数码表示特定对象的过程称为编码</strong>。N位二进制代码有2^n个状态，可以表示同样多的对象</li></ul><h3 id="2-2-BCD码"><a href="#2-2-BCD码" class="headerlink" title="2.2 BCD码"></a>2.2 BCD码</h3><ul><li>BCD码是一种至少用四位二进制编码表示<strong>一位十进制</strong>的代码</li><li>BCD码仅表示0~9的十个数码，剩下6个为禁用码</li><li>恒权码<ul><li>8421-BCD</li><li>2421-BCD：和为10的数互为反码</li></ul></li><li>无权码<ul><li>余3码：8421-BCD+0011，也有反射特性</li><li>余3循环码：取自四位典型格雷码的3-12这十个代码，此为“余3”，且相邻两编码只有一位码元不一样</li></ul></li></ul><h3 id="2-3-格雷码"><a href="#2-3-格雷码" class="headerlink" title="2.3 格雷码"></a>2.3 格雷码</h3><ul><li><p>任何两个相邻十进制数的格雷码<strong>仅有一位不同</strong>，大大减小代码变化时的出错概率</p></li><li><p>典型格雷码和8421-BCD码关系<br>$$<br>Gi = Bi+1 ⊕ Bi<br>$$</p></li><li><p>修改格雷码与典型格雷码<strong>隔开三位</strong></p></li><li><p>修改格雷码、格雷码1有<strong>镜面反射特性</strong>，称反射码</p></li><li><p>典型格雷码与格雷码2仅是<strong>最后一个码</strong>不同</p></li></ul><h3 id="2-4-检错码和纠错码"><a href="#2-4-检错码和纠错码" class="headerlink" title="2.4 检错码和纠错码"></a>2.4 检错码和纠错码</h3><ul><li>奇/偶校验码<ul><li>单向单错</li><li>可分离码（信息码和校验码可分离）</li></ul></li><li>误差纠错码（汉明码）<ul><li>汉明距离：两个等长字符不同位数<ul><li>最小汉明距离为1，无法检错</li><li>最小汉明距离为2，可以检错（奇偶校验码）</li><li>最小汉明距离为3，可以检错纠错</li></ul></li><li>汉明码：在原数据插入若干校验码进行错误检查和纠错的编码技术</li></ul></li></ul><h3 id="2-5-字符、数字代码"><a href="#2-5-字符、数字代码" class="headerlink" title="2.5 字符、数字代码"></a>2.5 字符、数字代码</h3><ul><li>EBCDIC</li><li>ASCII</li></ul><hr><h1 id="3-逻辑代数的基本概念和运算规则（上）"><a href="#3-逻辑代数的基本概念和运算规则（上）" class="headerlink" title="3 逻辑代数的基本概念和运算规则（上）"></a>3 逻辑代数的基本概念和运算规则（上）</h1><h3 id="3-1-逻辑代数三种基本运算"><a href="#3-1-逻辑代数三种基本运算" class="headerlink" title="3.1 逻辑代数三种基本运算"></a>3.1 逻辑代数三种基本运算</h3><ul><li>逻辑变量</li><li>逻辑函数</li><li>与（逻辑相乘、电路串联）</li><li>或（逻辑相加、电路并联）</li><li>非（逻辑求反）</li><li>三种运算可以复合</li></ul><h3 id="3-2-逻辑函数描述方式"><a href="#3-2-逻辑函数描述方式" class="headerlink" title="3.2 逻辑函数描述方式"></a>3.2 逻辑函数描述方式</h3><ul><li>逻辑函数表达式：用与、或、非表示逻辑关系的逻辑表达式</li><li>真值表：输入变量所有取值对应的函数取值列为表格<ul><li>不可遗漏、按二进制递增排列</li><li>真值表具有唯一性</li><li>真值表可用来判断两逻辑函数是否相等</li><li>从真值表写出逻辑函数的<strong>一般方法</strong><ol><li>从真值表中找出使逻辑函数为1的输入变量组合</li><li>每组输入变量的组合对应一个乘积项，取值为1写为原变量，取值为0的写为反变量</li><li>将乘积项相加，即可</li></ol></li></ul></li><li>逻辑（电路）图</li><li>卡诺图（后续章节）</li><li>波形图（时序图）</li><li>语言描述<ul><li>VHDL语言</li></ul></li><li>以上六种方式都可以相互转换</li></ul><hr><h1 id="4-逻辑代数的基本概念和运算规则（下）"><a href="#4-逻辑代数的基本概念和运算规则（下）" class="headerlink" title="4 逻辑代数的基本概念和运算规则（下）"></a>4 逻辑代数的基本概念和运算规则（下）</h1><h3 id="4-1-逻辑代数基础"><a href="#4-1-逻辑代数基础" class="headerlink" title="4.1 逻辑代数基础"></a>4.1 逻辑代数基础</h3><ul><li><p>逻辑代数基本公式</p><ol><li>交换律</li><li>结合律</li><li>分配律</li><li>01定律</li><li>互补律</li><li>重叠律</li><li>还原律</li><li>反演律</li></ol></li><li><p>逻辑代数常用公式（吸收率）</p><ol><li><p>$$<br>A+AB=A;<br>A(A+B)=A<br>$$</p></li><li><p>$$<br>AB+A\overline{B}=A<br>;(A+B)(A+\overline{B})=A<br>$$</p></li><li><p>$$<br>A+\overline{A}B=A+B;<br>A(\overline{A}+B)=AB<br>$$</p></li><li><p>$$<br>AB+\overline{A}C+BCDE……=AB+\overline{A}C<br>$$</p></li><li><p>$$<br>A\overline{AB}=A\overline{B};<br>\overline{A}\overline{AB}=\overline{A}<br>$$</p></li></ol></li><li><p>异或运算</p><ul><li>定义：</li></ul><p>  [点下试试]: <a href="https://zhuanlan.zhihu.com/p/43826007" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/43826007</a>    “点击查看异或运算”</p><ul><li><p>应用：数据加密</p></li><li><p>性质</p><ul><li>交换律</li><li>结合律</li><li>分配律</li><li>多变量异或运算<ul><li>变量为1的个数为奇数，结果为1</li><li>变量为1的个数为偶数，结果为0</li><li>与变量为0的个数无关</li></ul></li><li>多变量同或运算<ul><li>与上面相反</li></ul></li><li>偶数个相同变量A异（同）或结果为1</li><li>奇书个相同变量A异（同）或结果为A</li></ul></li></ul></li></ul><h3 id="4-2-逻辑代数基本定律"><a href="#4-2-逻辑代数基本定律" class="headerlink" title="4.2 逻辑代数基本定律"></a>4.2 逻辑代数基本定律</h3><ul><li>代入定理：在任何一个包含变量A的逻辑等式中，用<strong>另一个逻辑式</strong>代入式中所有A的位置，等式依然成立</li><li>反演定理：对于任何一个逻辑式Y，将<strong>乘和加互换</strong>，<strong>0和1互换</strong>，<strong>原变量和反变量互换</strong>，得到结果为Y的反变量<ul><li>不在单个变量上的非号保留</li></ul></li><li>对偶定理：逻辑式相等，则他们的对偶式也相等<ul><li>对偶式：<strong>乘和加互换</strong>，<strong>0和1互换</strong></li></ul></li></ul><hr><h1 id="5-逻辑函数的公式化简法"><a href="#5-逻辑函数的公式化简法" class="headerlink" title="5 逻辑函数的公式化简法"></a>5 逻辑函数的公式化简法</h1><h3 id="5-1-逻辑函数的最简形式和最简规则"><a href="#5-1-逻辑函数的最简形式和最简规则" class="headerlink" title="5.1 逻辑函数的最简形式和最简规则"></a>5.1 逻辑函数的最简形式和最简规则</h3><ul><li>与项（乘积项）最少</li><li>每个乘积项因子最少</li></ul><h3 id="5-2-常用的公式化简法"><a href="#5-2-常用的公式化简法" class="headerlink" title="5.2 常用的公式化简法"></a>5.2 常用的公式化简法</h3><ul><li><p>并项法：利用公式<br>$$<br>AB+A\overline{B}=A<br>$$</p></li><li><p>吸收法：利用公式<br>$$<br>A+AB=A;<br>$$</p></li><li><p>消项法：利用公式<br>$$<br>AB+\overline{A}C+BCDE……=AB+\overline{A}C<br>$$</p></li><li><p>消因子法：利用公式<br>$$<br>A+\overline{A}B=A+B<br>$$</p></li><li><p>配项法：利用公式<br>$$<br>A+A=A;<br>A+\overline{A}=1<br>$$</p></li><li><p>综合法</p></li></ul><h3 id="5-3-指定器件的逻辑函数化简"><a href="#5-3-指定器件的逻辑函数化简" class="headerlink" title="5.3 指定器件的逻辑函数化简"></a>5.3 指定器件的逻辑函数化简</h3><ul><li>尽量使用单一门电路</li></ul><hr><h1 id="6-逻辑函数的卡诺图表示"><a href="#6-逻辑函数的卡诺图表示" class="headerlink" title="6 逻辑函数的卡诺图表示"></a>6 逻辑函数的卡诺图表示</h1><h3 id="6-1-最小项定义及其性质"><a href="#6-1-最小项定义及其性质" class="headerlink" title="6.1 最小项定义及其性质"></a>6.1 最小项定义及其性质</h3><ul><li>定义：在n变量逻辑函数中，若<strong>m为包含n个因子的乘积项</strong>，而且这n个变量均以原变量或反变量形式在m中出现一次，称m为该组变量<strong>最小项</strong>，有2^n个</li><li>性质<ol><li>在输入变量任何取值下<strong>必有一个且仅有一个</strong>最小项的值为1</li><li><strong>全体最小项之和</strong>为1</li><li>如果一个最小项不在F中，则<strong>必在F非</strong>中</li><li>任意两个最小项<strong>乘积为0</strong></li><li><strong>相邻性</strong>的两个最小项之和可以消去一对因子合并为一项</li></ol></li></ul><h3 id="6-2-最大项定义及其性质"><a href="#6-2-最大项定义及其性质" class="headerlink" title="6.2 最大项定义及其性质"></a>6.2 最大项定义及其性质</h3><ul><li>定义：在n变量逻辑函数中，若M为n个变量之和，而且这n个变量均以原变量或反变量形式在M中出现一次，称M为该组变量<strong>最大项</strong>，有2^n个</li><li>性质<ol><li>在输入变量任何取值下<strong>必有一个且仅有一个</strong>最大项的值为0</li><li><strong>全体最大项之和</strong>为0</li><li>如果一个最大项不在F中，则<strong>必在F非</strong>中</li><li>任意两个最大项<strong>之和</strong>为1</li><li>只有<strong>一个变量不同</strong>的两最大项的<strong>乘积</strong>等于<strong>各相同变量</strong>之和</li></ol></li></ul><h3 id="6-3-逻辑函数两种标准形式"><a href="#6-3-逻辑函数两种标准形式" class="headerlink" title="6.3 逻辑函数两种标准形式"></a>6.3 逻辑函数两种标准形式</h3><ul><li>最小项之和（与或式）：补项+分配律</li><li>最大项之积（或与式）：用最小项之和转换</li></ul><h3 id="6-4-卡诺图定义及其特点"><a href="#6-4-卡诺图定义及其特点" class="headerlink" title="6.4 卡诺图定义及其特点"></a>6.4 卡诺图定义及其特点</h3><ul><li>每个小方格代表一个最小项（2^n个小方格）</li><li>几何相邻的小方格具有逻辑相邻性</li><li>方便书写多位格雷码</li></ul><p><video src="F:%5CDocument%5CVideos%5C2020-03-13_22-11-52.mp4"></video></p><h3 id="6-5-逻辑函数的卡诺图表示"><a href="#6-5-逻辑函数的卡诺图表示" class="headerlink" title="6.5 逻辑函数的卡诺图表示"></a>6.5 逻辑函数的卡诺图表示</h3><ul><li>已知函数式→化为最小项之和→卡诺图中对应最小项方格填1，其它0→卡诺图</li><li>真值表→卡诺图（本质一致）</li><li>卡诺图→真值表→逻辑函数式</li></ul><hr><h1 id="7-逻辑函数的卡诺图化简法"><a href="#7-逻辑函数的卡诺图化简法" class="headerlink" title="7 逻辑函数的卡诺图化简法"></a>7 逻辑函数的卡诺图化简法</h1><h3 id="7-1-卡诺图简化逻辑函数的基本性质"><a href="#7-1-卡诺图简化逻辑函数的基本性质" class="headerlink" title="7.1 卡诺图简化逻辑函数的基本性质"></a>7.1 卡诺图简化逻辑函数的基本性质</h3><ul><li>并2消1，合并两个相邻“1”格，消去一个变量</li><li>并4消2，合并四个相邻“1”格，消去两个变量</li><li>并8消3</li><li>并2^k消k</li></ul><h3 id="7-2-用卡诺图求解最简与或表达式"><a href="#7-2-用卡诺图求解最简与或表达式" class="headerlink" title="7.2 用卡诺图求解最简与或表达式"></a>7.2 用卡诺图求解最简与或表达式</h3><ul><li>真值表或最小项之和形式</li><li>画出卡诺图</li><li>合并最小项（画圈）<ul><li>1 格不能漏</li><li>1 格允许被多于一个圈包围</li><li>圈个数尽可能小</li><li>圈面积越大越好，但是必须为2^k个方格</li><li>不应有冗余项</li></ul></li></ul><h3 id="7-3-无关项及其在化简中的作用"><a href="#7-3-无关项及其在化简中的作用" class="headerlink" title="7.3 无关项及其在化简中的作用"></a>7.3 无关项及其在化简中的作用</h3><ul><li>约束项：恒等于0的最小项</li><li>任意项：或0或1不影响电路</li><li>无关项：以上两项，用x在卡诺图中表示，可0可1，<strong>辅助化简</strong></li></ul><hr><p>待更新…………</p>]]></content>
    
    
    <categories>
      
      <category>我的学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我的学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/03/07/hello-world/"/>
    <url>/2020/03/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="hljs"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="hljs"><pre><code class="hljs bash">$ hexo server</code></pre></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="hljs"><pre><code class="hljs bash">$ hexo generate</code></pre></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="hljs"><pre><code class="hljs bash">$ hexo deploy</code></pre></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>HelloWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HelloWorld</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉查找树的几个操作</title>
    <link href="/2020/03/07/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%9A%84%E5%87%A0%E4%B8%AA%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/03/07/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%9A%84%E5%87%A0%E4%B8%AA%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>一棵空树，或者是具有下列性质的二叉树：<br>（1）若左子树不空，则左子树上所有结点的值均小于它的根结点的值；<br>（2）若右子树不空，则右子树上所有结点的值均大于它的根结点的值；<br>（3）左、右子树也分别为二叉排序树；<br>（4）没有键值相等的结点。</p><a id="more"></a><h1 id="这里是题目的图片"><a href="#这里是题目的图片" class="headerlink" title="这里是题目的图片"></a><strong>这里是题目的图片</strong></h1><p><img src="https://img-blog.csdnimg.cn/2019112322430657.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1hKVFVib3R0b20=,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="在这里插入图片描述"></p><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>   // 结点类定义&#123;</span><span class="hljs-keyword">public</span>:<span class="hljs-keyword">int</span> value;<span class="hljs-keyword">int</span> ceng;Node *left;Node *right;Node(<span class="hljs-keyword">int</span> value1)&#123;ceng = <span class="hljs-number">1</span>;value = value1;left = <span class="hljs-literal">NULL</span>;right = <span class="hljs-literal">NULL</span>;&#125;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BST</span>   //二叉查找树类定义&#123;</span><span class="hljs-keyword">public</span>:<span class="hljs-keyword">int</span> t;<span class="hljs-keyword">int</span>*p=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[t];Node* root;BST(<span class="hljs-keyword">int</span> t1, <span class="hljs-keyword">int</span>* p1)  <span class="hljs-comment">//析构函数</span>&#123;t = t1;p = p1;<span class="hljs-comment">/*root = NULL;*/</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; t; i++)&#123;put(root,p[i]);&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(Node* &amp;x,<span class="hljs-keyword">int</span> value)</span>   <span class="hljs-comment">//加入结点</span></span>&#123;<span class="hljs-keyword">if</span> (x == <span class="hljs-literal">NULL</span>)            <span class="hljs-comment">//如果为空，就创建新节点</span>&#123;x = <span class="hljs-keyword">new</span> Node(value);&#125;<span class="hljs-keyword">else</span>                      <span class="hljs-comment">//如果不为空，判断和子树根节点value的大小，小则左，大则右</span>&#123;<span class="hljs-keyword">if</span> (value &lt; x-&gt;value)put(x-&gt;left, value);<span class="hljs-keyword">else</span>put(x-&gt;right, value);&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(Node*&amp; x, <span class="hljs-keyword">int</span> valuee)</span></span>&#123;<span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"真的不好意思，没有这个结点！"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span>;&#125;<span class="hljs-keyword">if</span> (x == <span class="hljs-literal">NULL</span>)            <span class="hljs-comment">//如果为空就算了</span>&#123;&#125;<span class="hljs-keyword">else</span>                      <span class="hljs-comment">//如果不为空，判断是否是当前value</span>&#123;<span class="hljs-keyword">if</span> (x-&gt;value == valuee)&#123;<span class="hljs-keyword">if</span> (x-&gt;left != <span class="hljs-literal">NULL</span> &amp;&amp; x-&gt;right == <span class="hljs-literal">NULL</span>)&#123;x = x-&gt;left;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">if</span> (x-&gt;right != <span class="hljs-literal">NULL</span> &amp;&amp; x-&gt;left == <span class="hljs-literal">NULL</span>)&#123;x = x-&gt;right;&#125;<span class="hljs-keyword">if</span> (x-&gt;right != <span class="hljs-literal">NULL</span> &amp;&amp; x-&gt;left != <span class="hljs-literal">NULL</span>)&#123;Node* y = x-&gt;right;<span class="hljs-keyword">while</span> (y-&gt;left != <span class="hljs-literal">NULL</span>)&#123;y = y-&gt;left;&#125;y-&gt;left = x-&gt;left;x = x-&gt;right;&#125;<span class="hljs-keyword">if</span> (x-&gt;right == <span class="hljs-literal">NULL</span> &amp;&amp; x-&gt;left == <span class="hljs-literal">NULL</span>)&#123;x = <span class="hljs-literal">NULL</span>;&#125;&#125;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">if</span> (valuee &lt; x-&gt;value)del(x-&gt;left, valuee);<span class="hljs-keyword">else</span>del(x-&gt;right, valuee);&#125;&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printtree</span><span class="hljs-params">(Node*&amp; x)</span>     <span class="hljs-comment">//中序遍历打印</span></span>&#123;<span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"真的不好意思，这是一个空树"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span>;&#125;<span class="hljs-keyword">if</span> (x != <span class="hljs-literal">NULL</span>)&#123;<span class="hljs-keyword">if</span> (x-&gt;left != <span class="hljs-literal">NULL</span>)&#123;printtree(x-&gt;left);&#125;<span class="hljs-built_in">cout</span> &lt;&lt; x-&gt;value &lt;&lt; <span class="hljs-string">" "</span>;<span class="hljs-keyword">if</span> (x-&gt;right != <span class="hljs-literal">NULL</span>)&#123;printtree(x-&gt;right);&#125;&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findlen</span><span class="hljs-params">(Node*&amp; x,<span class="hljs-keyword">int</span> &amp;sum,<span class="hljs-keyword">int</span> n)</span>    <span class="hljs-comment">//n是层数，给一个1值</span></span>&#123;<span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>)&#123;sum = <span class="hljs-number">0</span>;&#125;<span class="hljs-keyword">if</span> (x != <span class="hljs-literal">NULL</span>)&#123;sum += n;<span class="hljs-keyword">if</span> (x-&gt;left != <span class="hljs-literal">NULL</span>)&#123;findlen(x-&gt;left, sum, n+<span class="hljs-number">1</span>);&#125;<span class="hljs-keyword">if</span> (x-&gt;right != <span class="hljs-literal">NULL</span>)&#123;findlen(x-&gt;right, sum, n+<span class="hljs-number">1</span>);&#125;&#125;&#125;&#125;;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">int</span> t;  <span class="hljs-comment">//数列长度</span><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"请输入数列长度并依次输入数列各项的值"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-built_in">cin</span> &gt;&gt; t;<span class="hljs-keyword">int</span>* p = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[t];<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; t; i++)&#123;<span class="hljs-built_in">cin</span> &gt;&gt; p[i];&#125;<span class="hljs-function">BST <span class="hljs-title">B</span><span class="hljs-params">(t, p)</span></span>;<span class="hljs-keyword">int</span> q;<span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"请输入您想进行的操作:"</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-string">"1：中序遍历打印"</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-string">"2：输出平均查找长度"</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-string">"3：查找x并删除"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-built_in">cin</span> &gt;&gt; q;<span class="hljs-keyword">if</span> (q == <span class="hljs-number">1</span>)&#123;B.printtree(B.root);&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">if</span> (q == <span class="hljs-number">2</span>)&#123;<span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>;B.findlen(B.root, s, <span class="hljs-number">1</span>);<span class="hljs-built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"请输入要查找的字符"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-keyword">int</span> w;<span class="hljs-built_in">cin</span> &gt;&gt; w;B.del(B.root, w);B.printtree(B.root);&#125;&#125;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;&#125;</code></pre></div><h2 id="我这里使用链表实现，如有错误，请多多指正，感谢！"><a href="#我这里使用链表实现，如有错误，请多多指正，感谢！" class="headerlink" title="我这里使用链表实现，如有错误，请多多指正，感谢！"></a><strong><em>我这里使用链表实现，如有错误，请多多指正，感谢！</em></strong></h2>]]></content>
    
    
    <categories>
      
      <category>程序设计课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序设计课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows基础</title>
    <link href="/2020/03/07/windows%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/03/07/windows%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="windows基础"><a href="#windows基础" class="headerlink" title="windows基础"></a>windows基础</h2><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h2 id="windows基础-1"><a href="#windows基础-1" class="headerlink" title="windows基础"></a>windows基础</h2><ol><li><h4 id="杀毒软件"><a href="#杀毒软件" class="headerlink" title="杀毒软件"></a>杀毒软件</h4><ul><li>不要杀毒软件，除了火绒都是流氓，有商业需求安全性的可以使用付费的avast</li><li>垃圾清理，使用ccleaner</li><li>杀毒软件中的工具都有更好的替代（火绒拦截窗口？？？）</li></ul></li><li><h4 id="系统盘"><a href="#系统盘" class="headerlink" title="系统盘"></a>系统盘</h4><ul><li>磁盘分区（后续）</li><li>C盘少放东西</li><li>C盘至少上到100G</li></ul></li><li><h4 id="文件扩展名和隐藏文件"><a href="#文件扩展名和隐藏文件" class="headerlink" title="文件扩展名和隐藏文件"></a>文件扩展名和隐藏文件</h4><ul><li>务必打开文件扩展名</li><li>隐藏文件机制（藏东西）</li></ul></li><li><h4 id="文件路径和快捷方式"><a href="#文件路径和快捷方式" class="headerlink" title="文件路径和快捷方式"></a>文件路径和快捷方式</h4><ul><li>快捷方式删箭头</li></ul></li><li><h4 id="开始菜单"><a href="#开始菜单" class="headerlink" title="开始菜单"></a>开始菜单</h4><ul><li>都是快捷方式</li></ul></li><li><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><ul><li>截图：win+shift+s</li><li>新建文件夹：右键+w+f</li><li>剪切板：win+v</li><li>计算器：win+r+calc</li></ul></li><li><h4 id="win10自带设置"><a href="#win10自带设置" class="headerlink" title="win10自带设置"></a>win10自带设置</h4></li><li><h4 id="安全排除项和桌面注意事项"><a href="#安全排除项和桌面注意事项" class="headerlink" title="安全排除项和桌面注意事项"></a>安全排除项和桌面注意事项</h4></li><li><h4 id="分盘和厂商内存"><a href="#分盘和厂商内存" class="headerlink" title="分盘和厂商内存"></a>分盘和厂商内存</h4></li><li><h4 id="剖析C盘"><a href="#剖析C盘" class="headerlink" title="剖析C盘"></a>剖析C盘</h4><ul><li>七个文件夹修改路径</li></ul></li><li><h4 id="环境变量、系统变量、用户变量"><a href="#环境变量、系统变量、用户变量" class="headerlink" title="环境变量、系统变量、用户变量"></a>环境变量、系统变量、用户变量</h4><ul><li>windows键的搜索功能</li><li>cmd的搜索功能</li><li>系统变量：c-windows-system32</li><li>系统变量</li></ul></li><li><h4 id="控制面板——另一个设置"><a href="#控制面板——另一个设置" class="headerlink" title="控制面板——另一个设置"></a>控制面板——另一个设置</h4></li><li><h4 id="文件夹的分布"><a href="#文件夹的分布" class="headerlink" title="文件夹的分布"></a>文件夹的分布</h4><ul><li>分盘（4个，尽量英文命名文件夹）<ol><li>C</li><li>D（40-50G）<ul><li>software装常用软件</li><li>tool放小工具</li></ul></li><li>E<ul><li>Project<ul><li>c</li><li>java</li><li>matlab</li><li>…………</li></ul></li><li>DevelopTools<ul><li>vs2019</li><li>idea</li><li>…………</li></ul></li></ul></li><li>F<ul><li>download（安装包……）</li><li>photo</li><li>document</li><li>others（Game……）</li></ul></li></ol></li></ul></li><li><h4 id="安装软件注意事项"><a href="#安装软件注意事项" class="headerlink" title="安装软件注意事项"></a>安装软件注意事项</h4><ul><li>官网下载</li><li>文件路径</li></ul></li><li><h4 id="软件设置和首选项"><a href="#软件设置和首选项" class="headerlink" title="软件设置和首选项"></a>软件设置和首选项</h4></li><li><h4 id="软件推荐"><a href="#软件推荐" class="headerlink" title="软件推荐"></a>软件推荐</h4><ul><li>杀毒    avast</li><li>输入法     Rime    搜狗（要关广告）   自带</li><li>视频播放器  potplay√</li><li>音乐          qq、网易……Spotify</li><li>压缩           bandzip</li><li>清理垃圾    ccleaner</li><li>浏览器       GoogleChrome</li><li>office</li></ul></li><li><h4 id="工具推荐"><a href="#工具推荐" class="headerlink" title="工具推荐"></a>工具推荐</h4><ul><li>卸载工具     geek</li><li>录频软件     Camtasia Studio</li><li>截图             Faststone Capture、Snipaste</li><li>远程软件      Teamviewer、AnyDesk、向日葵</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>我的学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我的学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dijstra算法</title>
    <link href="/2020/03/07/dijstra%E7%AE%97%E6%B3%95/"/>
    <url>/2020/03/07/dijstra%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>迪杰斯特拉算法(Dijkstra)是由荷兰计算机科学家狄克斯特拉于1959 年提出的，因此又叫狄克斯特拉算法。是从一个顶点到其余各顶点的最短路径算法，解决的是有权图中最短路径问题。迪杰斯特拉算法主要特点是从起始点开始，采用贪心的策略，每次遍历到始点距离最近且未访问过的顶点的邻接节点，直到扩展到终点为止。<a id="more"></a></p><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxvalue 100000;</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">link</span>   //后结点&#123;</span><span class="hljs-keyword">public</span>:<span class="hljs-keyword">int</span> end;<span class="hljs-keyword">int</span> len;link *next;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">head</span>   //头结点&#123;</span><span class="hljs-keyword">public</span>:link* first = <span class="hljs-literal">NULL</span>;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">graphl</span>  //图的邻接表类定义&#123;</span><span class="hljs-keyword">public</span>:<span class="hljs-keyword">int</span> num;head * <span class="hljs-built_in">list</span> = <span class="hljs-keyword">new</span> head[num];graphl(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span>** input)  <span class="hljs-comment">//构造函数</span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<span class="hljs-built_in">list</span>[i].first = <span class="hljs-literal">NULL</span>;&#125;num = n;<span class="hljs-built_in">list</span> = <span class="hljs-keyword">new</span> head[n];<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<span class="hljs-keyword">if</span> (input[i][j] != <span class="hljs-number">0</span> &amp;&amp; input[i][j] != <span class="hljs-number">100000</span>)&#123;setedge(i, j, input[i][j]);&#125;&#125;&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> from, <span class="hljs-keyword">int</span> to, <span class="hljs-keyword">int</span> weight)</span>  <span class="hljs-comment">//添加边</span></span>&#123;<span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>[from].first == <span class="hljs-literal">NULL</span>)&#123;link *tmp = <span class="hljs-keyword">new</span> link;tmp-&gt;end = to;tmp-&gt;len = weight;tmp-&gt;next = <span class="hljs-literal">NULL</span>;<span class="hljs-built_in">list</span>[from].first = tmp;&#125;<span class="hljs-keyword">else</span>&#123;link* tmp1 = <span class="hljs-keyword">new</span> link;tmp1 = <span class="hljs-built_in">list</span>[from].first;<span class="hljs-keyword">while</span> (tmp1-&gt;next != <span class="hljs-literal">NULL</span>)&#123;tmp1 = tmp1-&gt;next;&#125;link* new1 = <span class="hljs-keyword">new</span> link;new1-&gt;len = weight;new1-&gt;end = to;new1-&gt;next = <span class="hljs-literal">NULL</span>;tmp1-&gt;next = new1;&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">weight</span><span class="hljs-params">(<span class="hljs-keyword">int</span> from, <span class="hljs-keyword">int</span> to,<span class="hljs-keyword">int</span> **input)</span>  <span class="hljs-comment">//返回某两点之间边的权值</span></span>&#123;<span class="hljs-keyword">if</span> (input[from][to] == <span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">return</span> maxvalue;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">return</span> input[from][to];&#125;&#125;&#125;;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(graphl&amp; g, <span class="hljs-keyword">int</span> *dist, <span class="hljs-keyword">int</span> *pre, <span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span>** input)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">int</span> n = <span class="hljs-number">6</span>;        <span class="hljs-comment">//结点数</span><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"input n"</span> &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">/*cin &gt;&gt; n;*/</span><span class="hljs-keyword">int</span>** input = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//构造邻接矩阵</span>input = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>*[n];<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;input[i] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];&#125;<span class="hljs-built_in">cout</span> &lt;&lt; input;input[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;input[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">20</span>;input[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">60</span>;input[<span class="hljs-number">0</span>][<span class="hljs-number">3</span>]=<span class="hljs-number">100000</span>;input[<span class="hljs-number">0</span>][<span class="hljs-number">4</span>]=<span class="hljs-number">10</span>;input[<span class="hljs-number">0</span>][<span class="hljs-number">5</span>]=<span class="hljs-number">65</span>;input[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">100000</span>;input[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;input[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">30</span>;input[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>]=<span class="hljs-number">70</span>;input[<span class="hljs-number">1</span>][<span class="hljs-number">4</span>]=<span class="hljs-number">100000</span>;input[<span class="hljs-number">1</span>][<span class="hljs-number">5</span>]=<span class="hljs-number">100000</span>;input[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">100000</span>;input[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">100000</span>;input[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">0</span>;input[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>]=<span class="hljs-number">40</span>;input[<span class="hljs-number">2</span>][<span class="hljs-number">4</span>]=<span class="hljs-number">100000</span>;input[<span class="hljs-number">2</span>][<span class="hljs-number">5</span>]=<span class="hljs-number">100000</span>;input[<span class="hljs-number">3</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">100000</span>;input[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">100000</span>;input[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">100000</span>;input[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>]=<span class="hljs-number">0</span>;input[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>]=<span class="hljs-number">35</span>;input[<span class="hljs-number">3</span>][<span class="hljs-number">5</span>]=<span class="hljs-number">100000</span>;input[<span class="hljs-number">4</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">100000</span>;input[<span class="hljs-number">4</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">100000</span>;input[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">100000</span>;input[<span class="hljs-number">4</span>][<span class="hljs-number">3</span>]=<span class="hljs-number">100000</span>;input[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>]=<span class="hljs-number">0</span>;input[<span class="hljs-number">4</span>][<span class="hljs-number">5</span>]=<span class="hljs-number">20</span>;input[<span class="hljs-number">5</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">100000</span>;input[<span class="hljs-number">5</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">100000</span>;input[<span class="hljs-number">5</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">15</span>;input[<span class="hljs-number">5</span>][<span class="hljs-number">3</span>]=<span class="hljs-number">10</span>;input[<span class="hljs-number">5</span>][<span class="hljs-number">4</span>]=<span class="hljs-number">100000</span>;input[<span class="hljs-number">5</span>][<span class="hljs-number">5</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//for (int i = 0; i &lt; n; i++)  //输入邻接矩阵</span><span class="hljs-comment">//&#123;</span><span class="hljs-comment">//for (int j = 0; j &lt; n; j++)</span><span class="hljs-comment">//&#123;</span><span class="hljs-comment">//cin &gt;&gt; input[i][j];</span><span class="hljs-comment">//&#125;</span><span class="hljs-comment">//cout &lt;&lt; endl;</span><span class="hljs-comment">//&#125;</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)  <span class="hljs-comment">//输chu邻接矩阵</span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; input[i][j] &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<span class="hljs-function">graphl <span class="hljs-title">g</span><span class="hljs-params">(n, input)</span></span>;  <span class="hljs-comment">//生成图g</span><span class="hljs-comment">//test</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">" "</span>;<span class="hljs-keyword">if</span> (g.<span class="hljs-built_in">list</span>[i].first == <span class="hljs-literal">NULL</span>)&#123;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">if</span> (g.<span class="hljs-built_in">list</span>[i].first != <span class="hljs-literal">NULL</span>)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; g.<span class="hljs-built_in">list</span>[i].first-&gt;end;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">" "</span>;link * tmp = <span class="hljs-keyword">new</span> link;tmp = g.<span class="hljs-built_in">list</span>[i].first;<span class="hljs-keyword">while</span> (tmp-&gt;next != <span class="hljs-literal">NULL</span>)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; tmp-&gt;next-&gt;end;tmp = tmp-&gt;next;&#125;&#125;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-keyword">int</span>* dist = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<span class="hljs-keyword">int</span>* pre = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;dijkstra(g, dist, pre, <span class="hljs-number">0</span>, n,input);<span class="hljs-comment">//开始dijkstra算法</span><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">//dijkstra算法</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(graphl&amp; g, <span class="hljs-keyword">int</span> *dist, <span class="hljs-keyword">int</span> *pre, <span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span>** input)</span></span>&#123;<span class="hljs-keyword">int</span> i;<span class="hljs-keyword">int</span> *S = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;S[i] = <span class="hljs-number">0</span>;<span class="hljs-keyword">if</span> (i != s &amp;&amp; g.weight(s, i,input) == <span class="hljs-number">0</span>)&#123;dist[i] = maxvalue;&#125;<span class="hljs-keyword">else</span>&#123;dist[i] = g.weight(s, i,input);&#125;<span class="hljs-keyword">if</span> (i != s &amp;&amp; dist[i] &lt; <span class="hljs-number">100000</span>)&#123;pre[i] = s;&#125;<span class="hljs-keyword">else</span>pre[i] = <span class="hljs-number">-1</span>;&#125;S[s] = <span class="hljs-number">1</span>;<span class="hljs-keyword">int</span> min, v;<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)&#123;min = maxvalue;v = s;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<span class="hljs-keyword">if</span> (S[j] == <span class="hljs-number">0</span> &amp;&amp; dist[j] &lt; min)&#123;v = j;min = dist[j];&#125;&#125;S[v] = <span class="hljs-number">1</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<span class="hljs-keyword">if</span> (S[j] == <span class="hljs-number">0</span> &amp;&amp; g.weight(v, j,input) != <span class="hljs-number">0</span> &amp;&amp; dist[v] + g.weight(v, j,input) &lt; dist[j])&#123;dist[j] = dist[v] + g.weight(v, j,input);pre[j] = v;&#125;&#125;&#125;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"结果开始输出了："</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<span class="hljs-keyword">int</span> j=i;<span class="hljs-built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">" "</span>;<span class="hljs-comment">/*cout &lt;&lt; pre[i];*/</span><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; pre[j]&lt;&lt;<span class="hljs-string">" "</span>;<span class="hljs-keyword">if</span> (pre[j] == <span class="hljs-number">-1</span>)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"这根本过不去啊"</span>;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">if</span> (pre[j] == <span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<span class="hljs-keyword">else</span>j = pre[j];&#125;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>程序设计课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序设计课</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
